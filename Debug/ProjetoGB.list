
ProjetoGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000992c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dec  08009dec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009dec  08009dec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dec  08009dec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009df0  08009df0  00019df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  20000074  08009e68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c24  08009e68  00021c24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b314  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b88  00000000  00000000  0003b3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0003ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00040788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a485  00000000  00000000  00041e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b456  00000000  00000000  0005c2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bcae  00000000  00000000  0007772b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001133d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b68  00000000  00000000  0011342c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a24 	.word	0x08009a24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08009a24 	.word	0x08009a24

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <read_register16>:
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value)
 {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af04      	add	r7, sp, #16
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	460b      	mov	r3, r1
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000946:	7afb      	ldrb	r3, [r7, #11]
 8000948:	b29a      	uxth	r2, r3
 800094a:	8af9      	ldrh	r1, [r7, #22]
 800094c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	2302      	movs	r3, #2
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2301      	movs	r3, #1
 800095e:	f002 ff03 	bl	8003768 <HAL_I2C_Mem_Read>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10b      	bne.n	8000980 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000968:	7d7b      	ldrb	r3, [r7, #21]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7d3b      	ldrb	r3, [r7, #20]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	801a      	strh	r2, [r3, #0]
		return true;
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <read_register16+0x56>
	} else
		return false;
 8000980:	2300      	movs	r3, #0

}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) 
		{
 800098a:	b590      	push	{r4, r7, lr}
 800098c:	b08b      	sub	sp, #44	; 0x2c
 800098e:	af04      	add	r7, sp, #16
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	461a      	mov	r2, r3
 8000996:	460b      	mov	r3, r1
 8000998:	72fb      	strb	r3, [r7, #11]
 800099a:	4613      	mov	r3, r2
 800099c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	7abb      	ldrb	r3, [r7, #10]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	8af9      	ldrh	r1, [r7, #22]
 80009b4:	f241 3488 	movw	r4, #5000	; 0x1388
 80009b8:	9402      	str	r4, [sp, #8]
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	f002 fed1 	bl	8003768 <HAL_I2C_Mem_Read>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <read_data+0x46>
		return 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e000      	b.n	80009d2 <read_data+0x48>
	else
		return 1;
 80009d0:	2301      	movs	r3, #1

}
 80009d2:	4618      	mov	r0, r3
 80009d4:	371c      	adds	r7, #28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd90      	pop	{r4, r7, pc}

080009da <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) 
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	461a      	mov	r2, r3
 80009e6:	2188      	movs	r1, #136	; 0x88
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff9f 	bl	800092c <read_register16>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d06f      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3302      	adds	r3, #2
 80009f8:	461a      	mov	r2, r3
 80009fa:	218a      	movs	r1, #138	; 0x8a
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff95 	bl	800092c <read_register16>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d065      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	218c      	movs	r1, #140	; 0x8c
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff8b 	bl	800092c <read_register16>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d05b      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, (uint16_t *)&dev->dig_P1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3306      	adds	r3, #6
 8000a20:	461a      	mov	r2, r3
 8000a22:	218e      	movs	r1, #142	; 0x8e
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff81 	bl	800092c <read_register16>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d051      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3308      	adds	r3, #8
 8000a34:	461a      	mov	r2, r3
 8000a36:	2190      	movs	r1, #144	; 0x90
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff77 	bl	800092c <read_register16>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d047      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	330a      	adds	r3, #10
 8000a48:	461a      	mov	r2, r3
 8000a4a:	2192      	movs	r1, #146	; 0x92
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff6d 	bl	800092c <read_register16>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d03d      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	330c      	adds	r3, #12
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2194      	movs	r1, #148	; 0x94
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff63 	bl	800092c <read_register16>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d033      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	330e      	adds	r3, #14
 8000a70:	461a      	mov	r2, r3
 8000a72:	2196      	movs	r1, #150	; 0x96
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff59 	bl	800092c <read_register16>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d029      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3310      	adds	r3, #16
 8000a84:	461a      	mov	r2, r3
 8000a86:	2198      	movs	r1, #152	; 0x98
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff4f 	bl	800092c <read_register16>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d01f      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3312      	adds	r3, #18
 8000a98:	461a      	mov	r2, r3
 8000a9a:	219a      	movs	r1, #154	; 0x9a
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff45 	bl	800092c <read_register16>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d015      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3314      	adds	r3, #20
 8000aac:	461a      	mov	r2, r3
 8000aae:	219c      	movs	r1, #156	; 0x9c
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff3b 	bl	800092c <read_register16>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9)) 
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3316      	adds	r3, #22
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	219e      	movs	r1, #158	; 0x9e
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff31 	bl	800092c <read_register16>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <read_calibration_data+0xfa>
	{

		return true;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <read_calibration_data+0xfc>
	}

	return false;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) 
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f103 0218 	add.w	r2, r3, #24
 8000aec:	2301      	movs	r3, #1
 8000aee:	21a1      	movs	r1, #161	; 0xa1
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff4a 	bl	800098a <read_data>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14b      	bne.n	8000b94 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	331a      	adds	r3, #26
 8000b00:	461a      	mov	r2, r3
 8000b02:	21e1      	movs	r1, #225	; 0xe1
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff11 	bl	800092c <read_register16>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d041      	beq.n	8000b94 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f103 021c 	add.w	r2, r3, #28
 8000b16:	2301      	movs	r3, #1
 8000b18:	21e3      	movs	r1, #227	; 0xe3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff35 	bl	800098a <read_data>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d136      	bne.n	8000b94 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000b26:	f107 030e 	add.w	r3, r7, #14
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	21e4      	movs	r1, #228	; 0xe4
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fefc 	bl	800092c <read_register16>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d02c      	beq.n	8000b94 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	461a      	mov	r2, r3
 8000b40:	21e5      	movs	r1, #229	; 0xe5
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fef2 	bl	800092c <read_register16>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d022      	beq.n	8000b94 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000b54:	2301      	movs	r3, #1
 8000b56:	21e7      	movs	r1, #231	; 0xe7
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff16 	bl	800098a <read_data>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d117      	bne.n	8000b94 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	121b      	asrs	r3, r3, #8
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000b84:	89bb      	ldrh	r3, [r7, #12]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	841a      	strh	r2, [r3, #32]

		return true;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b088      	sub	sp, #32
 8000ba2:	af04      	add	r7, sp, #16
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	70fb      	strb	r3, [r7, #3]
 8000baa:	4613      	mov	r3, r2
 8000bac:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	89f9      	ldrh	r1, [r7, #14]
 8000bc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	1cbb      	adds	r3, r7, #2
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f002 fcd0 	bl	8003574 <HAL_I2C_Mem_Write>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <write_register8+0x40>
		return false;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <write_register8+0x42>
	else
		return true;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000bf6:	2b76      	cmp	r3, #118	; 0x76
 8000bf8:	d005      	beq.n	8000c06 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000bfe:	2b77      	cmp	r3, #119	; 0x77
 8000c00:	d001      	beq.n	8000c06 <bmp280_init+0x1e>

		return false;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e099      	b.n	8000d3a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	21d0      	movs	r1, #208	; 0xd0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff feba 	bl	800098a <read_data>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <bmp280_init+0x38>
		return false;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e08c      	b.n	8000d3a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c26:	2b58      	cmp	r3, #88	; 0x58
 8000c28:	d006      	beq.n	8000c38 <bmp280_init+0x50>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c30:	2b60      	cmp	r3, #96	; 0x60
 8000c32:	d001      	beq.n	8000c38 <bmp280_init+0x50>

		return false;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e080      	b.n	8000d3a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000c38:	22b6      	movs	r2, #182	; 0xb6
 8000c3a:	21e0      	movs	r1, #224	; 0xe0
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffae 	bl	8000b9e <write_register8>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <bmp280_init+0x64>
		return false;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e076      	b.n	8000d3a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000c4c:	f107 020c 	add.w	r2, r7, #12
 8000c50:	2301      	movs	r3, #1
 8000c52:	21f3      	movs	r1, #243	; 0xf3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fe98 	bl	800098a <read_data>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f5      	bne.n	8000c4c <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000c60:	7b3b      	ldrb	r3, [r7, #12]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff feb5 	bl	80009da <read_calibration_data>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d100      	bne.n	8000c7e <bmp280_init+0x96>
 8000c7c:	e001      	b.n	8000c82 <bmp280_init+0x9a>
		return false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e05b      	b.n	8000d3a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c88:	2b60      	cmp	r3, #96	; 0x60
 8000c8a:	d10a      	bne.n	8000ca2 <bmp280_init+0xba>
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff26 	bl	8000ade <read_hum_calibration_data>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f083 0301 	eor.w	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <bmp280_init+0xba>
		return false;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e04b      	b.n	8000d3a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	795b      	ldrb	r3, [r3, #5]
 8000ca6:	015b      	lsls	r3, r3, #5
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	21f5      	movs	r1, #245	; 0xf5
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff6d 	bl	8000b9e <write_register8>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <bmp280_init+0xe6>
		return false;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e035      	b.n	8000d3a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d102      	bne.n	8000cdc <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b25a      	sxtb	r2, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000cfa:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d02:	2b60      	cmp	r3, #96	; 0x60
 8000d04:	d10d      	bne.n	8000d22 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	21f2      	movs	r1, #242	; 0xf2
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff43 	bl	8000b9e <write_register8>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <bmp280_init+0x13a>
			return false;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e00b      	b.n	8000d3a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000d22:	7bbb      	ldrb	r3, [r7, #14]
 8000d24:	461a      	mov	r2, r3
 8000d26:	21f4      	movs	r1, #244	; 0xf4
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff38 	bl	8000b9e <write_register8>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <bmp280_init+0x150>
		return false;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e000      	b.n	8000d3a <bmp280_init+0x152>
	}

	return true;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000d42:	b480      	push	{r7}
 8000d44:	b087      	sub	sp, #28
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	10da      	asrs	r2, r3, #3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000d64:	12db      	asrs	r3, r3, #11
 8000d66:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	111b      	asrs	r3, r3, #4
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	8812      	ldrh	r2, [r2, #0]
 8000d70:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	1112      	asrs	r2, r2, #4
 8000d76:	68f9      	ldr	r1, [r7, #12]
 8000d78:	8809      	ldrh	r1, [r1, #0]
 8000d7a:	1a52      	subs	r2, r2, r1
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000d8c:	139b      	asrs	r3, r3, #14
 8000d8e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	441a      	add	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	3380      	adds	r3, #128	; 0x80
 8000da6:	121b      	asrs	r3, r3, #8
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <bmp280_read_fixed_temp>:
	}

	return true;
}

bool bmp280_read_fixed_temp(BMP280_HandleTypedef *dev, int32_t *temperature) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
	int32_t adc_temp;
	uint8_t data[2];

	// Need to read in one sequence to ensure they match.
	size_t size = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	617b      	str	r3, [r7, #20]
	if (read_data(dev, 0xfa, data, size)) {
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	21fa      	movs	r1, #250	; 0xfa
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fddd 	bl	800098a <read_data>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <bmp280_read_fixed_temp+0x28>
		return false;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e010      	b.n	8000dfc <bmp280_read_fixed_temp+0x4a>
	}

	adc_temp = data[0] << 12 | data[1] << 4 | 0x00 >> 4;
 8000dda:	7b3b      	ldrb	r3, [r7, #12]
 8000ddc:	031a      	lsls	r2, r3, #12
 8000dde:	7b7b      	ldrb	r3, [r7, #13]
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	461a      	mov	r2, r3
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa7 	bl	8000d42 <compensate_temperature>
 8000df4:	4602      	mov	r2, r0
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]

	return true;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 ff68 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f892 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 fa2e 	bl	8001270 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e14:	f000 f8ea 	bl	8000fec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e18:	f000 f926 	bl	8001068 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e1c:	f000 f952 	bl	80010c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e20:	f000 f986 	bl	8001130 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e24:	f000 f9d2 	bl	80011cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000e28:	f000 fe38 	bl	8001a9c <LCD_Init>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000e2c:	482e      	ldr	r0, [pc, #184]	; (8000ee8 <main+0xe4>)
 8000e2e:	f001 fbd7 	bl	80025e0 <HAL_ADCEx_Calibration_Start>

  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <main+0xe8>)
 8000e34:	2276      	movs	r2, #118	; 0x76
 8000e36:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <main+0xe8>)
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <main+0xec>)
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  bmp280.params.mode = BMP280_MODE_NORMAL;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <main+0xe8>)
 8000e40:	2203      	movs	r2, #3
 8000e42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  bmp280.params.filter = BMP280_FILTER_OFF;
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <main+0xe8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  bmp280.params.oversampling_pressure = BMP280_SKIPPED;
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <main+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  bmp280.params.oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <main+0xe8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  bmp280.params.oversampling_humidity = BMP280_SKIPPED;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <main+0xe8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  bmp280.params.standby = BMP280_STANDBY_4000;
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <main+0xe8>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  while (!(bmp280_init(&bmp280, &bmp280.params)))
 8000e6e:	e003      	b.n	8000e78 <main+0x74>
  {
	  HAL_Delay(2000);
 8000e70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e74:	f000 ff64 	bl	8001d40 <HAL_Delay>
  while (!(bmp280_init(&bmp280, &bmp280.params)))
 8000e78:	491e      	ldr	r1, [pc, #120]	; (8000ef4 <main+0xf0>)
 8000e7a:	481c      	ldr	r0, [pc, #112]	; (8000eec <main+0xe8>)
 8000e7c:	f7ff feb4 	bl	8000be8 <bmp280_init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f1      	bne.n	8000e70 <main+0x6c>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000e8c:	481a      	ldr	r0, [pc, #104]	; (8000ef8 <main+0xf4>)
 8000e8e:	f004 fbf3 	bl	8005678 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e92:	f004 ffc9 	bl	8005e28 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2cMutex */
  i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 8000e96:	4819      	ldr	r0, [pc, #100]	; (8000efc <main+0xf8>)
 8000e98:	f005 f904 	bl	80060a4 <osMutexNew>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <main+0xfc>)
 8000ea0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of iluminanciaTask */
  iluminanciaTaskHandle = osThreadNew(StartIluminanciaTask, NULL, &iluminanciaTask_attributes);
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <main+0x100>)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4818      	ldr	r0, [pc, #96]	; (8000f08 <main+0x104>)
 8000ea8:	f005 f824 	bl	8005ef4 <osThreadNew>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <main+0x108>)
 8000eb0:	6013      	str	r3, [r2, #0]

  /* creation of envioTask */
  envioTaskHandle = osThreadNew(StartEnvioTask, NULL, &envioTask_attributes);
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <main+0x10c>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4817      	ldr	r0, [pc, #92]	; (8000f14 <main+0x110>)
 8000eb8:	f005 f81c 	bl	8005ef4 <osThreadNew>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <main+0x114>)
 8000ec0:	6013      	str	r3, [r2, #0]

  /* creation of umidadeTask */
  umidadeTaskHandle = osThreadNew(StartUmidadeTask, NULL, &umidadeTask_attributes);
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <main+0x118>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <main+0x11c>)
 8000ec8:	f005 f814 	bl	8005ef4 <osThreadNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <main+0x120>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of temperaturaTask */
  temperaturaTaskHandle = osThreadNew(StartTemperaturaTask, NULL, &temperaturaTask_attributes);
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <main+0x124>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <main+0x128>)
 8000ed8:	f005 f80c 	bl	8005ef4 <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <main+0x12c>)
 8000ee0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee2:	f004 ffd3 	bl	8005e8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <main+0xe2>
 8000ee8:	20000090 	.word	0x20000090
 8000eec:	20000210 	.word	0x20000210
 8000ef0:	200000c0 	.word	0x200000c0
 8000ef4:	2000023c 	.word	0x2000023c
 8000ef8:	2000016c 	.word	0x2000016c
 8000efc:	08009b68 	.word	0x08009b68
 8000f00:	2000020c 	.word	0x2000020c
 8000f04:	08009ad8 	.word	0x08009ad8
 8000f08:	0800133d 	.word	0x0800133d
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	08009afc 	.word	0x08009afc
 8000f14:	080013a5 	.word	0x080013a5
 8000f18:	20000200 	.word	0x20000200
 8000f1c:	08009b20 	.word	0x08009b20
 8000f20:	080014d5 	.word	0x080014d5
 8000f24:	20000204 	.word	0x20000204
 8000f28:	08009b44 	.word	0x08009b44
 8000f2c:	0800154d 	.word	0x0800154d
 8000f30:	20000208 	.word	0x20000208

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2228      	movs	r2, #40	; 0x28
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f008 f8fa 	bl	800913c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	2301      	movs	r3, #1
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fafe 	bl	800458c <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f96:	f000 fb79 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fd6a 	bl	8004a90 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fc2:	f000 fb63 	bl	800168c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 ff24 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fde:	f000 fb55 	bl	800168c <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3750      	adds	r7, #80	; 0x50
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_ADC1_Init+0x74>)
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <MX_ADC1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_ADC1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_ADC1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_ADC1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_ADC1_Init+0x74>)
 8001016:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800101a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_ADC1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_ADC1_Init+0x74>)
 8001024:	2201      	movs	r2, #1
 8001026:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_ADC1_Init+0x74>)
 800102a:	f000 fead 	bl	8001d88 <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 fb2a 	bl	800168c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001038:	2301      	movs	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2301      	movs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_ADC1_Init+0x74>)
 800104a:	f001 f935 	bl	80022b8 <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001054:	f000 fb1a 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000090 	.word	0x20000090
 8001064:	40012400 	.word	0x40012400

08001068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_I2C1_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a6:	f001 fdc3 	bl	8002c30 <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 faec 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000c0 	.word	0x200000c0
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_SPI1_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f8:	2230      	movs	r2, #48	; 0x30
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SPI1_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_SPI1_Init+0x64>)
 8001116:	f003 fff9 	bl	800510c <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 fab4 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000114 	.word	0x20000114
 800112c:	40013000 	.word	0x40013000

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM2_Init+0x98>)
 800114e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_TIM2_Init+0x98>)
 8001156:	f64e 2260 	movw	r2, #60000	; 0xea60
 800115a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM2_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM2_Init+0x98>)
 8001164:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001168:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_TIM2_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM2_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM2_Init+0x98>)
 8001178:	f004 fa2e 	bl	80055d8 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001182:	f000 fa83 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM2_Init+0x98>)
 8001194:	f004 fbf8 	bl	8005988 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800119e:	f000 fa75 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM2_Init+0x98>)
 80011b0:	f004 fdca 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011ba:	f000 fa67 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000016c 	.word	0x2000016c

080011cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM3_Init+0x9c>)
 80011ea:	4a20      	ldr	r2, [pc, #128]	; (800126c <MX_TIM3_Init+0xa0>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM3_Init+0x9c>)
 80011f0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM3_Init+0x9c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 216;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM3_Init+0x9c>)
 80011fe:	22d8      	movs	r2, #216	; 0xd8
 8001200:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM3_Init+0x9c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_TIM3_Init+0x9c>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <MX_TIM3_Init+0x9c>)
 8001210:	f004 f9e2 	bl	80055d8 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800121a:	f000 fa37 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4619      	mov	r1, r3
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <MX_TIM3_Init+0x9c>)
 800122c:	f004 fbac 	bl	8005988 <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 fa29 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <MX_TIM3_Init+0x9c>)
 8001248:	f004 fd7e 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001252:	f000 fa1b 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <MX_TIM3_Init+0x9c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f06f 0201 	mvn.w	r2, #1
 800125e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200001b4 	.word	0x200001b4
 800126c:	40000400 	.word	0x40000400

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_GPIO_Init+0x8c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <MX_GPIO_Init+0x8c>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_GPIO_Init+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_GPIO_Init+0x8c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a16      	ldr	r2, [pc, #88]	; (80012fc <MX_GPIO_Init+0x8c>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_GPIO_Init+0x8c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_GPIO_Init+0x8c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <MX_GPIO_Init+0x8c>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_GPIO_Init+0x8c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2119      	movs	r1, #25
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <MX_GPIO_Init+0x90>)
 80012d2:	f001 fc95 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin;
 80012d6:	2319      	movs	r3, #25
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_GPIO_Init+0x90>)
 80012ee:	f001 fb03 	bl	80028f8 <HAL_GPIO_Init>

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800

08001304 <map>:

/* USER CODE BEGIN 4 */
uint map(uint in, uint in_min, uint in_max, uint out_min, uint out_max)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
	return (in - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	1a8a      	subs	r2, r1, r2
 800131e:	fb03 f202 	mul.w	r2, r3, r2
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1acb      	subs	r3, r1, r3
 8001328:	fbb2 f2f3 	udiv	r2, r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4413      	add	r3, r2
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <StartIluminanciaTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIluminanciaTask */
void StartIluminanciaTask(void *argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af02      	add	r7, sp, #8
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(ler_iluminancia)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <StartIluminanciaTask+0x54>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01c      	beq.n	8001386 <StartIluminanciaTask+0x4a>
	{
		ler_iluminancia = false;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <StartIluminanciaTask+0x54>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]

		osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <StartIluminanciaTask+0x58>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f04f 31ff 	mov.w	r1, #4294967295
 800135a:	4618      	mov	r0, r3
 800135c:	f004 ff3c 	bl	80061d8 <osMutexAcquire>
		tx_byte[0] = 0x10;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <StartIluminanciaTask+0x5c>)
 8001362:	2210      	movs	r2, #16
 8001364:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, BH1750_I2CADDR, tx_byte, 1, 100);
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <StartIluminanciaTask+0x5c>)
 800136e:	2146      	movs	r1, #70	; 0x46
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <StartIluminanciaTask+0x60>)
 8001372:	f001 fda1 	bl	8002eb8 <HAL_I2C_Master_Transmit>
		osMutexRelease(i2cMutexHandle);
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <StartIluminanciaTask+0x58>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f004 ff8a 	bl	8006294 <osMutexRelease>

		HAL_TIM_Base_Start_IT(&htim3);
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <StartIluminanciaTask+0x64>)
 8001382:	f004 f979 	bl	8005678 <HAL_TIM_Base_Start_IT>
	}
    osDelay(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f004 fe5e 	bl	8006048 <osDelay>
	if(ler_iluminancia)
 800138c:	e7da      	b.n	8001344 <StartIluminanciaTask+0x8>
 800138e:	bf00      	nop
 8001390:	20000254 	.word	0x20000254
 8001394:	2000020c 	.word	0x2000020c
 8001398:	20000264 	.word	0x20000264
 800139c:	200000c0 	.word	0x200000c0
 80013a0:	200001b4 	.word	0x200001b4

080013a4 <StartEnvioTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEnvioTask */
void StartEnvioTask(void *argument)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEnvioTask */
  /* Infinite loop */
  for(;;)
  {
	if(umidade_lida && temperatura_lida && iluminancia_lida)
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <StartEnvioTask+0xfc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d071      	beq.n	8001498 <StartEnvioTask+0xf4>
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <StartEnvioTask+0x100>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d06d      	beq.n	8001498 <StartEnvioTask+0xf4>
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <StartEnvioTask+0x104>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d069      	beq.n	8001498 <StartEnvioTask+0xf4>
	{
		umidade_lida = false;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <StartEnvioTask+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
		temperatura_lida = false;
 80013ca:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <StartEnvioTask+0x100>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
		iluminancia_lida = false;
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <StartEnvioTask+0x104>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]

		LCD_Clear();
 80013d6:	f000 fba3 	bl	8001b20 <LCD_Clear>
		sprintf(lcd_string, "Umidade: %d", umidade);
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <StartEnvioTask+0x108>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4933      	ldr	r1, [pc, #204]	; (80014b0 <StartEnvioTask+0x10c>)
 80013e2:	4834      	ldr	r0, [pc, #208]	; (80014b4 <StartEnvioTask+0x110>)
 80013e4:	f007 feb2 	bl	800914c <siprintf>
		LCD_Write_String(0, 0, lcd_string);
 80013e8:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <StartEnvioTask+0x110>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 fbdf 	bl	8001bb0 <LCD_Write_String>
		sprintf(lcd_string, "Temp: %ld", temperatura);
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <StartEnvioTask+0x114>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4930      	ldr	r1, [pc, #192]	; (80014bc <StartEnvioTask+0x118>)
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <StartEnvioTask+0x110>)
 80013fc:	f007 fea6 	bl	800914c <siprintf>
		LCD_Write_String(0, 1, lcd_string);
 8001400:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <StartEnvioTask+0x110>)
 8001402:	2101      	movs	r1, #1
 8001404:	2000      	movs	r0, #0
 8001406:	f000 fbd3 	bl	8001bb0 <LCD_Write_String>
		sprintf(lcd_string, "Lux: %u", iluminancia);
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <StartEnvioTask+0x11c>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	492c      	ldr	r1, [pc, #176]	; (80014c4 <StartEnvioTask+0x120>)
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <StartEnvioTask+0x110>)
 8001414:	f007 fe9a 	bl	800914c <siprintf>
		LCD_Write_String(0, 2, lcd_string);
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <StartEnvioTask+0x110>)
 800141a:	2102      	movs	r1, #2
 800141c:	2000      	movs	r0, #0
 800141e:	f000 fbc7 	bl	8001bb0 <LCD_Write_String>

		dados[0] = umidade;
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <StartEnvioTask+0x108>)
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <StartEnvioTask+0x124>)
 8001428:	701a      	strb	r2, [r3, #0]
		dados[1] = temperatura >> 24;
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <StartEnvioTask+0x114>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	161b      	asrs	r3, r3, #24
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <StartEnvioTask+0x124>)
 8001434:	705a      	strb	r2, [r3, #1]
		dados[2] = temperatura >> 16;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <StartEnvioTask+0x114>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	141b      	asrs	r3, r3, #16
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <StartEnvioTask+0x124>)
 8001440:	709a      	strb	r2, [r3, #2]
		dados[3] = temperatura >> 8;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <StartEnvioTask+0x114>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <StartEnvioTask+0x124>)
 800144c:	70da      	strb	r2, [r3, #3]
		dados[4] = temperatura;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <StartEnvioTask+0x114>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <StartEnvioTask+0x124>)
 8001456:	711a      	strb	r2, [r3, #4]
		dados[5] = iluminancia >> 8;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <StartEnvioTask+0x11c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <StartEnvioTask+0x124>)
 8001464:	715a      	strb	r2, [r3, #5]
		dados[6] = iluminancia;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <StartEnvioTask+0x11c>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <StartEnvioTask+0x124>)
 800146e:	719a      	strb	r2, [r3, #6]

		osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <StartEnvioTask+0x128>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	4618      	mov	r0, r3
 800147a:	f004 fead 	bl	80061d8 <osMutexAcquire>
		HAL_I2C_Master_Transmit(&hi2c1, ESP32_I2C_ADRESS, dados, 7, 100);
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2307      	movs	r3, #7
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <StartEnvioTask+0x124>)
 8001486:	21aa      	movs	r1, #170	; 0xaa
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <StartEnvioTask+0x12c>)
 800148a:	f001 fd15 	bl	8002eb8 <HAL_I2C_Master_Transmit>
		osMutexRelease(i2cMutexHandle);
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <StartEnvioTask+0x128>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fefe 	bl	8006294 <osMutexRelease>
	}
    osDelay(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f004 fdd5 	bl	8006048 <osDelay>
	if(umidade_lida && temperatura_lida && iluminancia_lida)
 800149e:	e785      	b.n	80013ac <StartEnvioTask+0x8>
 80014a0:	20000251 	.word	0x20000251
 80014a4:	2000025d 	.word	0x2000025d
 80014a8:	20000255 	.word	0x20000255
 80014ac:	2000024f 	.word	0x2000024f
 80014b0:	08009a80 	.word	0x08009a80
 80014b4:	20000268 	.word	0x20000268
 80014b8:	20000258 	.word	0x20000258
 80014bc:	08009a8c 	.word	0x08009a8c
 80014c0:	20000252 	.word	0x20000252
 80014c4:	08009a98 	.word	0x08009a98
 80014c8:	20000248 	.word	0x20000248
 80014cc:	2000020c 	.word	0x2000020c
 80014d0:	200000c0 	.word	0x200000c0

080014d4 <StartUmidadeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUmidadeTask */
void StartUmidadeTask(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUmidadeTask */
  /* Infinite loop */
  for(;;)
  {
	if(ler_umidade)
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <StartUmidadeTask+0x64>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d025      	beq.n	8001530 <StartUmidadeTask+0x5c>
	{
		ler_umidade = false;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <StartUmidadeTask+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start(&hadc1);
 80014ea:	4814      	ldr	r0, [pc, #80]	; (800153c <StartUmidadeTask+0x68>)
 80014ec:	f000 fd24 	bl	8001f38 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <StartUmidadeTask+0x68>)
 80014f4:	f000 fdce 	bl	8002094 <HAL_ADC_PollForConversion>
		ad_res = HAL_ADC_GetValue(&hadc1);
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <StartUmidadeTask+0x68>)
 80014fa:	f000 fed1 	bl	80022a0 <HAL_ADC_GetValue>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <StartUmidadeTask+0x6c>)
 8001504:	801a      	strh	r2, [r3, #0]

		umidade = (uint8_t)(100 - map(ad_res, 0, 4095, 0, 100));
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <StartUmidadeTask+0x6c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2300      	movs	r3, #0
 8001512:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001516:	2100      	movs	r1, #0
 8001518:	f7ff fef4 	bl	8001304 <map>
 800151c:	4603      	mov	r3, r0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <StartUmidadeTask+0x70>)
 8001528:	701a      	strb	r2, [r3, #0]

		umidade_lida = true;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <StartUmidadeTask+0x74>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f004 fd89 	bl	8006048 <osDelay>
	if(ler_umidade)
 8001536:	e7d1      	b.n	80014dc <StartUmidadeTask+0x8>
 8001538:	20000250 	.word	0x20000250
 800153c:	20000090 	.word	0x20000090
 8001540:	20000244 	.word	0x20000244
 8001544:	2000024f 	.word	0x2000024f
 8001548:	20000251 	.word	0x20000251

0800154c <StartTemperaturaTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperaturaTask */
void StartTemperaturaTask(void *argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperaturaTask */
  /* Infinite loop */
  for(;;)
  {
	if(ler_temperatura)
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <StartTemperaturaTask+0x44>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <StartTemperaturaTask+0x3c>
	{
		ler_temperatura = false;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <StartTemperaturaTask+0x44>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]

		osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <StartTemperaturaTask+0x48>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 31ff 	mov.w	r1, #4294967295
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fe34 	bl	80061d8 <osMutexAcquire>
		bmp280_read_fixed_temp(&bmp280, &temperatura);
 8001570:	4909      	ldr	r1, [pc, #36]	; (8001598 <StartTemperaturaTask+0x4c>)
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <StartTemperaturaTask+0x50>)
 8001574:	f7ff fc1d 	bl	8000db2 <bmp280_read_fixed_temp>
		osMutexRelease(i2cMutexHandle);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <StartTemperaturaTask+0x48>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fe89 	bl	8006294 <osMutexRelease>

		temperatura_lida = true;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <StartTemperaturaTask+0x54>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f004 fd5d 	bl	8006048 <osDelay>
	if(ler_temperatura)
 800158e:	e7e1      	b.n	8001554 <StartTemperaturaTask+0x8>
 8001590:	2000025c 	.word	0x2000025c
 8001594:	2000020c 	.word	0x2000020c
 8001598:	20000258 	.word	0x20000258
 800159c:	20000210 	.word	0x20000210
 80015a0:	2000025d 	.word	0x2000025d

080015a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b4:	d108      	bne.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		ler_umidade = true;
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
		ler_temperatura = true;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
		ler_iluminancia = true;
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == TIM3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d139      	bne.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_TIM_Base_Stop_IT(&htim3);
 80015d2:	4826      	ldr	r0, [pc, #152]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015d4:	f004 f8a2 	bl	800571c <HAL_TIM_Base_Stop_IT>

		osMutexAcquire(i2cMutexHandle, osWaitForever);
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fdf9 	bl	80061d8 <osMutexAcquire>
		HAL_I2C_Master_Receive(&hi2c1, BH1750_I2CADDR, rx_byte, 2, 100);
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ee:	2146      	movs	r1, #70	; 0x46
 80015f0:	4821      	ldr	r0, [pc, #132]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015f2:	f001 fd5f 	bl	80030b4 <HAL_I2C_Master_Receive>
		osMutexRelease(i2cMutexHandle);
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fe4a 	bl	8006294 <osMutexRelease>

		iluminancia = rx_byte[0] << 8 | rx_byte[1];
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001616:	801a      	strh	r2, [r3, #0]
		iluminancia /= 1.2;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fee9 	bl	80003f4 <__aeabi_i2d>
 8001622:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001628:	f7ff f878 	bl	800071c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff f95a 	bl	80008ec <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800163e:	801a      	strh	r2, [r3, #0]

		iluminancia_lida = true;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>
    HAL_IncTick();
 8001650:	f000 fb5a 	bl	8001d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000250 	.word	0x20000250
 8001660:	2000025c 	.word	0x2000025c
 8001664:	20000254 	.word	0x20000254
 8001668:	40000400 	.word	0x40000400
 800166c:	200001b4 	.word	0x200001b4
 8001670:	2000020c 	.word	0x2000020c
 8001674:	20000260 	.word	0x20000260
 8001678:	200000c0 	.word	0x200000c0
 800167c:	20000252 	.word	0x20000252
 8001680:	3ff33333 	.word	0x3ff33333
 8001684:	20000255 	.word	0x20000255
 8001688:	40012c00 	.word	0x40012c00

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_MspInit+0x68>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_MspInit+0x68>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x68>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x68>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_MspInit+0x68>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x68>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	210f      	movs	r1, #15
 80016d2:	f06f 0001 	mvn.w	r0, #1
 80016d6:	f001 f8e4 	bl	80028a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x6c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x6c>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_ADC_MspInit+0x6c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d121      	bne.n	800176c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_ADC_MspInit+0x70>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_ADC_MspInit+0x70>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_ADC_MspInit+0x70>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_ADC_MspInit+0x70>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_ADC_MspInit+0x70>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_ADC_MspInit+0x70>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_ADC_MspInit+0x74>)
 8001768:	f001 f8c6 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40012400 	.word	0x40012400
 8001778:	40021000 	.word	0x40021000
 800177c:	40010800 	.word	0x40010800

08001780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <HAL_I2C_MspInit+0x70>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d123      	bne.n	80017e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017b8:	23c0      	movs	r3, #192	; 0xc0
 80017ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	2312      	movs	r3, #18
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	480b      	ldr	r0, [pc, #44]	; (80017f8 <HAL_I2C_MspInit+0x78>)
 80017cc:	f001 f894 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40005400 	.word	0x40005400
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010c00 	.word	0x40010c00

080017fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d12f      	bne.n	800187c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a13      	ldr	r2, [pc, #76]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001860:	f001 f84a 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001864:	2340      	movs	r3, #64	; 0x40
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001878:	f001 f83e 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013000 	.word	0x40013000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d114      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_TIM_Base_MspInit+0x78>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_TIM_Base_MspInit+0x78>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_TIM_Base_MspInit+0x78>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2105      	movs	r1, #5
 80018be:	201c      	movs	r0, #28
 80018c0:	f000 ffef 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c4:	201c      	movs	r0, #28
 80018c6:	f001 f808 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018ca:	e018      	b.n	80018fe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_TIM_Base_MspInit+0x7c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d113      	bne.n	80018fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_TIM_Base_MspInit+0x78>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_TIM_Base_MspInit+0x78>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_TIM_Base_MspInit+0x78>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2105      	movs	r1, #5
 80018f2:	201d      	movs	r0, #29
 80018f4:	f000 ffd5 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f8:	201d      	movs	r0, #29
 80018fa:	f000 ffee 	bl	80028da <HAL_NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	40000400 	.word	0x40000400

08001910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	2019      	movs	r0, #25
 8001926:	f000 ffbc 	bl	80028a2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800192a:	2019      	movs	r0, #25
 800192c:	f000 ffd5 	bl	80028da <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_InitTick+0x9c>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_InitTick+0x9c>)
 8001936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_InitTick+0x9c>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f003 fa16 	bl	8004d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001958:	f003 fa00 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 800195c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <HAL_InitTick+0xa0>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	3b01      	subs	r3, #1
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_InitTick+0xa4>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <HAL_InitTick+0xa8>)
 8001970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_InitTick+0xa4>)
 8001974:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001978:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_InitTick+0xa4>)
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_InitTick+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_InitTick+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <HAL_InitTick+0xa4>)
 800198e:	f003 fe23 	bl	80055d8 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d104      	bne.n	80019a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_InitTick+0xa4>)
 800199a:	f003 fe6d 	bl	8005678 <HAL_TIM_Base_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3730      	adds	r7, #48	; 0x30
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	2000027c 	.word	0x2000027c
 80019b8:	40012c00 	.word	0x40012c00

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
	...

080019e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM1_UP_IRQHandler+0x10>)
 80019ee:	f003 fec3 	bl	8005778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000027c 	.word	0x2000027c

080019fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM2_IRQHandler+0x10>)
 8001a02:	f003 feb9 	bl	8005778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000016c 	.word	0x2000016c

08001a10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM3_IRQHandler+0x10>)
 8001a16:	f003 feaf 	bl	8005778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200001b4 	.word	0x200001b4

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f007 fb3a 	bl	80090cc <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20005000 	.word	0x20005000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	200002c4 	.word	0x200002c4
 8001a8c:	20001c28 	.word	0x20001c28

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  LCD_Reset();
 8001aa0:	f000 f810 	bl	8001ac4 <LCD_Reset>
  LCD_Write_Command(0x21);
 8001aa4:	2021      	movs	r0, #33	; 0x21
 8001aa6:	f000 f8a3 	bl	8001bf0 <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 8001aaa:	20d0      	movs	r0, #208	; 0xd0
 8001aac:	f000 f8a0 	bl	8001bf0 <LCD_Write_Command>
  LCD_Write_Command(0x20);
 8001ab0:	2020      	movs	r0, #32
 8001ab2:	f000 f89d 	bl	8001bf0 <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 8001ab6:	200c      	movs	r0, #12
 8001ab8:	f000 f89a 	bl	8001bf0 <LCD_Write_Command>
  LCD_Clear();
 8001abc:	f000 f830 	bl	8001b20 <LCD_Clear>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2101      	movs	r1, #1
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <LCD_Reset+0x24>)
 8001ace:	f001 f897 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001ad2:	2032      	movs	r0, #50	; 0x32
 8001ad4:	f000 f934 	bl	8001d40 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2101      	movs	r1, #1
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <LCD_Reset+0x24>)
 8001ade:	f001 f88f 	bl	8002c00 <HAL_GPIO_WritePin>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010800 	.word	0x40010800

08001aec <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f873 	bl	8001bf0 <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f86c 	bl	8001bf0 <LCD_Write_Command>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8001b26:	2100      	movs	r1, #0
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff ffdf 	bl	8001aec <LCD_Set_Postion>
  for(t=0;t<6;t++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	e00e      	b.n	8001b52 <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	71bb      	strb	r3, [r7, #6]
 8001b38:	e005      	b.n	8001b46 <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f880 	bl	8001c40 <LCD_Write_Data>
    for(k=0;k<84;k++)
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	3301      	adds	r3, #1
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	2b53      	cmp	r3, #83	; 0x53
 8001b4a:	d9f6      	bls.n	8001b3a <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d9ed      	bls.n	8001b34 <LCD_Clear+0x14>
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	3b20      	subs	r3, #32
 8001b72:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e00f      	b.n	8001b9a <LCD_Write_Char+0x36>
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	7bf9      	ldrb	r1, [r7, #15]
 8001b7e:	480b      	ldr	r0, [pc, #44]	; (8001bac <LCD_Write_Char+0x48>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4403      	add	r3, r0
 8001b8a:	440b      	add	r3, r1
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f856 	bl	8001c40 <LCD_Write_Data>
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3301      	adds	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d9ec      	bls.n	8001b7a <LCD_Write_Char+0x16>
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08009b90 	.word	0x08009b90

08001bb0 <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	603a      	str	r2, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 8001bc0:	79ba      	ldrb	r2, [r7, #6]
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff90 	bl	8001aec <LCD_Set_Postion>
  while(* str) {
 8001bcc:	e007      	b.n	8001bde <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ffc6 	bl	8001b64 <LCD_Write_Char>
    str ++;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
  while(* str) {
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f3      	bne.n	8001bce <LCD_Write_String+0x1e>
  }
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <LCD_Write_Command+0x48>)
 8001c00:	f000 fffe 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2110      	movs	r1, #16
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <LCD_Write_Command+0x48>)
 8001c0a:	f000 fff9 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 8001c0e:	1df9      	adds	r1, r7, #7
 8001c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c14:	2201      	movs	r2, #1
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <LCD_Write_Command+0x4c>)
 8001c18:	f003 fafc 	bl	8005214 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2108      	movs	r1, #8
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <LCD_Write_Command+0x48>)
 8001c22:	f000 ffed 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2110      	movs	r1, #16
 8001c2a:	4803      	ldr	r0, [pc, #12]	; (8001c38 <LCD_Write_Command+0x48>)
 8001c2c:	f000 ffe8 	bl	8002c00 <HAL_GPIO_WritePin>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	20000114 	.word	0x20000114

08001c40 <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	480e      	ldr	r0, [pc, #56]	; (8001c88 <LCD_Write_Data+0x48>)
 8001c50:	f000 ffd6 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2110      	movs	r1, #16
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <LCD_Write_Data+0x48>)
 8001c5a:	f000 ffd1 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 8001c5e:	1df9      	adds	r1, r7, #7
 8001c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c64:	2201      	movs	r2, #1
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <LCD_Write_Data+0x4c>)
 8001c68:	f003 fad4 	bl	8005214 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2108      	movs	r1, #8
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <LCD_Write_Data+0x48>)
 8001c72:	f000 ffc5 	bl	8002c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2110      	movs	r1, #16
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <LCD_Write_Data+0x48>)
 8001c7c:	f000 ffc0 	bl	8002c00 <HAL_GPIO_WritePin>

}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	20000114 	.word	0x20000114

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cb6:	f7ff feeb 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f007 fa0d 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff f8a1 	bl	8000e04 <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ccc:	08009df4 	.word	0x08009df4
  ldr r2, =_sbss
 8001cd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cd4:	20001c24 	.word	0x20001c24

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x28>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fdcd 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f7ff fe0c 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fcce 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_IncTick+0x1c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_IncTick+0x20>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_IncTick+0x20>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000008 	.word	0x20000008
 8001d28:	200002c8 	.word	0x200002c8

08001d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_GetTick+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	200002c8 	.word	0x200002c8

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffe0 	bl	8001d2c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0be      	b.n	8001f28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fc9e 	bl	8001708 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fbc5 	bl	800255c <ADC_ConversionStop_Disable>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8099 	bne.w	8001f16 <HAL_ADC_Init+0x18e>
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 8095 	bne.w	8001f16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001df4:	f023 0302 	bic.w	r3, r3, #2
 8001df8:	f043 0202 	orr.w	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b1b      	ldrb	r3, [r3, #12]
 8001e0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e20:	d003      	beq.n	8001e2a <HAL_ADC_Init+0xa2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_ADC_Init+0xa8>
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Init+0xaa>
 8001e30:	2300      	movs	r3, #0
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7d1b      	ldrb	r3, [r3, #20]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d119      	bne.n	8001e74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	035a      	lsls	r2, r3, #13
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e00b      	b.n	8001e74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_ADC_Init+0x1a8>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_Init+0x126>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d104      	bne.n	8001eb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_ADC_Init+0x1ac>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef2:	e018      	b.n	8001f26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f023 0312 	bic.w	r3, r3, #18
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f14:	e007      	b.n	8001f26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	ffe1f7fd 	.word	0xffe1f7fd
 8001f34:	ff1f0efe 	.word	0xff1f0efe

08001f38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e098      	b.n	8002084 <HAL_ADC_Start+0x14c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 faa4 	bl	80024a8 <ADC_Enable>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8087 	bne.w	800207a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a41      	ldr	r2, [pc, #260]	; (800208c <HAL_ADC_Start+0x154>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d105      	bne.n	8001f96 <HAL_ADC_Start+0x5e>
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_ADC_Start+0x158>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d026      	beq.n	8001ffe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc0:	e01d      	b.n	8001ffe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <HAL_ADC_Start+0x158>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_Start+0xaa>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_ADC_Start+0x154>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10d      	bne.n	8001ffe <HAL_ADC_Start+0xc6>
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_ADC_Start+0x158>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f023 0206 	bic.w	r2, r3, #6
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
 8002016:	e002      	b.n	800201e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0202 	mvn.w	r2, #2
 800202e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800203a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800203e:	d113      	bne.n	8002068 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_ADC_Start+0x154>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d105      	bne.n	8002056 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_ADC_Start+0x158>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	e00c      	b.n	8002082 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e003      	b.n	8002082 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40012800 	.word	0x40012800
 8002090:	40012400 	.word	0x40012400

08002094 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020aa:	f7ff fe3f 	bl	8001d2c <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	f043 0220 	orr.w	r2, r3, #32
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0d3      	b.n	800227e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d131      	bne.n	8002148 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d12a      	bne.n	8002148 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020f2:	e021      	b.n	8002138 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d01d      	beq.n	8002138 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_ADC_PollForConversion+0x7e>
 8002102:	f7ff fe13 	bl	8001d2c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d212      	bcs.n	8002138 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0a2      	b.n	800227e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0d6      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002146:	e070      	b.n	800222a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002148:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <HAL_ADC_PollForConversion+0x1f4>)
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	2002      	movs	r0, #2
 800214e:	f002 ff1d 	bl	8004f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002152:	4603      	mov	r3, r0
 8002154:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6919      	ldr	r1, [r3, #16]
 800215e:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_ADC_PollForConversion+0x1f8>)
 8002160:	400b      	ands	r3, r1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_ADC_PollForConversion+0x104>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_ADC_PollForConversion+0x1fc>)
 800216e:	400b      	ands	r3, r1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_ADC_PollForConversion+0x104>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_ADC_PollForConversion+0x200>)
 800217c:	400b      	ands	r3, r1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_ADC_PollForConversion+0x100>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_ADC_PollForConversion+0x204>)
 800218a:	400b      	ands	r3, r1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_PollForConversion+0x100>
 8002190:	2314      	movs	r3, #20
 8002192:	e020      	b.n	80021d6 <HAL_ADC_PollForConversion+0x142>
 8002194:	2329      	movs	r3, #41	; 0x29
 8002196:	e01e      	b.n	80021d6 <HAL_ADC_PollForConversion+0x142>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_ADC_PollForConversion+0x200>)
 80021a0:	400b      	ands	r3, r1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_ADC_PollForConversion+0x120>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_ADC_PollForConversion+0x204>)
 80021ae:	400b      	ands	r3, r1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <HAL_ADC_PollForConversion+0x13c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_ADC_PollForConversion+0x208>)
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x140>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_ADC_PollForConversion+0x208>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x140>
 80021d0:	2354      	movs	r3, #84	; 0x54
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_PollForConversion+0x142>
 80021d4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021dc:	e021      	b.n	8002222 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d01a      	beq.n	800221c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_ADC_PollForConversion+0x168>
 80021ec:	f7ff fd9e 	bl	8001d2c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d20f      	bcs.n	800221c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d90b      	bls.n	800221c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f043 0204 	orr.w	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e030      	b.n	800227e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d8d9      	bhi.n	80021de <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f06f 0212 	mvn.w	r2, #18
 8002232:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800224a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800224e:	d115      	bne.n	800227c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002254:	2b00      	cmp	r3, #0
 8002256:	d111      	bne.n	800227c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000
 800228c:	24924924 	.word	0x24924924
 8002290:	00924924 	.word	0x00924924
 8002294:	12492492 	.word	0x12492492
 8002298:	00492492 	.word	0x00492492
 800229c:	00249249 	.word	0x00249249

080022a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x20>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e0dc      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1da>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d81c      	bhi.n	8002322 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	635a      	str	r2, [r3, #52]	; 0x34
 8002320:	e03c      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d81c      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b23      	subs	r3, #35	; 0x23
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	4019      	ands	r1, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b23      	subs	r3, #35	; 0x23
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
 8002362:	e01b      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	; 0x41
 8002376:	221f      	movs	r2, #31
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4019      	ands	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b41      	subs	r3, #65	; 0x41
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d91c      	bls.n	80023de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	2207      	movs	r2, #7
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	4019      	ands	r1, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b1e      	subs	r3, #30
 80023d0:	fa00 f203 	lsl.w	r2, r0, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	e019      	b.n	8002412 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4019      	ands	r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6898      	ldr	r0, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800241e:	2b11      	cmp	r3, #17
 8002420:	d132      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_ADC_ConfigChannel+0x1e4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d125      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002448:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d11a      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9a      	lsrs	r2, r3, #18
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002468:	e002      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <HAL_ADC_ConfigChannel+0x1b2>
 8002476:	e007      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012400 	.word	0x40012400
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d040      	beq.n	8002548 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <ADC_Enable+0xac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <ADC_Enable+0xb0>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e4:	e002      	b.n	80024ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f2:	f7ff fc1b 	bl	8001d2c <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024f8:	e01f      	b.n	800253a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fa:	f7ff fc17 	bl	8001d2c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d918      	bls.n	800253a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d011      	beq.n	800253a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d1d8      	bne.n	80024fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000
 8002558:	431bde83 	.word	0x431bde83

0800255c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d12e      	bne.n	80025d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002586:	f7ff fbd1 	bl	8001d2c <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258c:	e01b      	b.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800258e:	f7ff fbcd 	bl	8001d2c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d0dc      	beq.n	800258e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_ADCEx_Calibration_Start+0x1e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e095      	b.n	800272a <HAL_ADCEx_Calibration_Start+0x14a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa8 	bl	800255c <ADC_ConversionStop_Disable>
 800260c:	4603      	mov	r3, r0
 800260e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8084 	bne.w	8002720 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002620:	f023 0302 	bic.w	r3, r3, #2
 8002624:	f043 0202 	orr.w	r2, r3, #2
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_ADCEx_Calibration_Start+0x154>)
 800262e:	681c      	ldr	r4, [r3, #0]
 8002630:	2002      	movs	r0, #2
 8002632:	f002 fcab 	bl	8004f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002636:	4603      	mov	r3, r0
 8002638:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800263c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800263e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ff2a 	bl	80024a8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002664:	f7ff fb62 	bl	8001d2c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800266a:	e01b      	b.n	80026a4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800266c:	f7ff fb5e 	bl	8001d2c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d914      	bls.n	80026a4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	f023 0312 	bic.w	r3, r3, #18
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e042      	b.n	800272a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1dc      	bne.n	800266c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0204 	orr.w	r2, r2, #4
 80026c0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026c2:	f7ff fb33 	bl	8001d2c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026c8:	e01b      	b.n	8002702 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026ca:	f7ff fb2f 	bl	8001d2c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b0a      	cmp	r3, #10
 80026d6:	d914      	bls.n	8002702 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f023 0312 	bic.w	r3, r3, #18
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e013      	b.n	800272a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1dc      	bne.n	80026ca <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	f023 0303 	bic.w	r3, r3, #3
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002728:	7dfb      	ldrb	r3, [r7, #23]
}
 800272a:	4618      	mov	r0, r3
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4906      	ldr	r1, [pc, #24]	; (80027d0 <__NVIC_EnableIRQ+0x34>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff4f 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff64 	bl	8002780 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ffb2 	bl	8002828 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff81 	bl	80027d4 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff57 	bl	800279c <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e169      	b.n	8002be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800290c:	2201      	movs	r2, #1
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	429a      	cmp	r2, r3
 8002926:	f040 8158 	bne.w	8002bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a9a      	ldr	r2, [pc, #616]	; (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d05e      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002934:	4a98      	ldr	r2, [pc, #608]	; (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d875      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800293a:	4a98      	ldr	r2, [pc, #608]	; (8002b9c <HAL_GPIO_Init+0x2a4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d058      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002940:	4a96      	ldr	r2, [pc, #600]	; (8002b9c <HAL_GPIO_Init+0x2a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d86f      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002946:	4a96      	ldr	r2, [pc, #600]	; (8002ba0 <HAL_GPIO_Init+0x2a8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d052      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 800294c:	4a94      	ldr	r2, [pc, #592]	; (8002ba0 <HAL_GPIO_Init+0x2a8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d869      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002952:	4a94      	ldr	r2, [pc, #592]	; (8002ba4 <HAL_GPIO_Init+0x2ac>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04c      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002958:	4a92      	ldr	r2, [pc, #584]	; (8002ba4 <HAL_GPIO_Init+0x2ac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d863      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800295e:	4a92      	ldr	r2, [pc, #584]	; (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d046      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002964:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d85d      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800296a:	2b12      	cmp	r3, #18
 800296c:	d82a      	bhi.n	80029c4 <HAL_GPIO_Init+0xcc>
 800296e:	2b12      	cmp	r3, #18
 8002970:	d859      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_GPIO_Init+0x80>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029f3 	.word	0x080029f3
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029df 	.word	0x080029df
 8002984:	08002a21 	.word	0x08002a21
 8002988:	08002a27 	.word	0x08002a27
 800298c:	08002a27 	.word	0x08002a27
 8002990:	08002a27 	.word	0x08002a27
 8002994:	08002a27 	.word	0x08002a27
 8002998:	08002a27 	.word	0x08002a27
 800299c:	08002a27 	.word	0x08002a27
 80029a0:	08002a27 	.word	0x08002a27
 80029a4:	08002a27 	.word	0x08002a27
 80029a8:	08002a27 	.word	0x08002a27
 80029ac:	08002a27 	.word	0x08002a27
 80029b0:	08002a27 	.word	0x08002a27
 80029b4:	08002a27 	.word	0x08002a27
 80029b8:	08002a27 	.word	0x08002a27
 80029bc:	080029d5 	.word	0x080029d5
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	4a79      	ldr	r2, [pc, #484]	; (8002bac <HAL_GPIO_Init+0x2b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ca:	e02c      	b.n	8002a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	623b      	str	r3, [r7, #32]
          break;
 80029d2:	e029      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	3304      	adds	r3, #4
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e024      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	3308      	adds	r3, #8
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e01f      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	330c      	adds	r3, #12
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e01a      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029fa:	2304      	movs	r3, #4
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e013      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	611a      	str	r2, [r3, #16]
          break;
 8002a12:	e009      	b.n	8002a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a14:	2308      	movs	r3, #8
 8002a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	615a      	str	r2, [r3, #20]
          break;
 8002a1e:	e003      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          break;
 8002a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2bff      	cmp	r3, #255	; 0xff
 8002a2c:	d801      	bhi.n	8002a32 <HAL_GPIO_Init+0x13a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e001      	b.n	8002a36 <HAL_GPIO_Init+0x13e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d802      	bhi.n	8002a44 <HAL_GPIO_Init+0x14c>
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x152>
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	3b08      	subs	r3, #8
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	210f      	movs	r1, #15
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80b1 	beq.w	8002bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	; (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <HAL_GPIO_Init+0x2c0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1ec>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <HAL_GPIO_Init+0x2c4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1e8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_GPIO_Init+0x2c8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1e4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <HAL_GPIO_Init+0x2cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1e0>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e004      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002af6:	492f      	ldr	r1, [pc, #188]	; (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	492c      	ldr	r1, [pc, #176]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4928      	ldr	r1, [pc, #160]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	491e      	ldr	r1, [pc, #120]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4918      	ldr	r1, [pc, #96]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d021      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
 8002b94:	e021      	b.n	8002bda <HAL_GPIO_Init+0x2e2>
 8002b96:	bf00      	nop
 8002b98:	10320000 	.word	0x10320000
 8002b9c:	10310000 	.word	0x10310000
 8002ba0:	10220000 	.word	0x10220000
 8002ba4:	10210000 	.word	0x10210000
 8002ba8:	10120000 	.word	0x10120000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	40010c00 	.word	0x40010c00
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4909      	ldr	r1, [pc, #36]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3301      	adds	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f47f ae8e 	bne.w	800290c <HAL_GPIO_Init+0x14>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	372c      	adds	r7, #44	; 0x2c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40010400 	.word	0x40010400

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fd92 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f002 f84e 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7fe ff2e 	bl	8001d2c <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 80e0 	bne.w	80030a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4970      	ldr	r1, [pc, #448]	; (80030ac <HAL_I2C_Master_Transmit+0x1f4>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f001 f972 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0d3      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x50>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fe5e 	bl	8003c38 <I2C_MasterRequestWrite>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f9c:	e066      	b.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f001 f9ec 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x188>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f001 f9dc 	bl	8004402 <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d194      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	460b      	mov	r3, r1
 80030c2:	817b      	strh	r3, [r7, #10]
 80030c4:	4613      	mov	r3, r2
 80030c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7fe fe2e 	bl	8001d2c <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b20      	cmp	r3, #32
 80030dc:	f040 823f 	bne.w	800355e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2319      	movs	r3, #25
 80030e6:	2201      	movs	r2, #1
 80030e8:	497f      	ldr	r1, [pc, #508]	; (80032e8 <HAL_I2C_Master_Receive+0x234>)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f001 f872 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	e232      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_I2C_Master_Receive+0x54>
 8003104:	2302      	movs	r3, #2
 8003106:	e22b      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d007      	beq.n	800312e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2222      	movs	r2, #34	; 0x22
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2210      	movs	r2, #16
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	893a      	ldrh	r2, [r7, #8]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a5f      	ldr	r2, [pc, #380]	; (80032ec <HAL_I2C_Master_Receive+0x238>)
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003170:	8979      	ldrh	r1, [r7, #10]
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fde0 	bl	8003d3c <I2C_MasterRequestRead>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1ec      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d113      	bne.n	80031b6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e1c0      	b.n	8003538 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11e      	bne.n	80031fc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ce:	b672      	cpsid	i
}
 80031d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031f8:	b662      	cpsie	i
}
 80031fa:	e035      	b.n	8003268 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b02      	cmp	r3, #2
 8003202:	d11e      	bne.n	8003242 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003212:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003214:	b672      	cpsid	i
}
 8003216:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800323e:	b662      	cpsie	i
}
 8003240:	e012      	b.n	8003268 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003268:	e166      	b.n	8003538 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	2b03      	cmp	r3, #3
 8003270:	f200 811f 	bhi.w	80034b2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b01      	cmp	r3, #1
 800327a:	d123      	bne.n	80032c4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f001 f8ff 	bl	8004484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e167      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032c2:	e139      	b.n	8003538 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d152      	bne.n	8003372 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	2200      	movs	r2, #0
 80032d4:	4906      	ldr	r1, [pc, #24]	; (80032f0 <HAL_I2C_Master_Receive+0x23c>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 ff7c 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e13c      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
 80032e6:	bf00      	nop
 80032e8:	00100002 	.word	0x00100002
 80032ec:	ffff0000 	.word	0xffff0000
 80032f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032f4:	b672      	cpsid	i
}
 80032f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800333a:	b662      	cpsie	i
}
 800333c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003370:	e0e2      	b.n	8003538 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	2200      	movs	r2, #0
 800337a:	497b      	ldr	r1, [pc, #492]	; (8003568 <HAL_I2C_Master_Receive+0x4b4>)
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 ff29 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0e9      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800339c:	b672      	cpsid	i
}
 800339e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033d2:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_I2C_Master_Receive+0x4b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	4a65      	ldr	r2, [pc, #404]	; (8003570 <HAL_I2C_Master_Receive+0x4bc>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0a1a      	lsrs	r2, r3, #8
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00da      	lsls	r2, r3, #3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d118      	bne.n	800342a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800341a:	b662      	cpsie	i
}
 800341c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09a      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d1d9      	bne.n	80033ec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800347a:	b662      	cpsie	i
}
 800347c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b0:	e042      	b.n	8003538 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 ffe4 	bl	8004484 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e04c      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d118      	bne.n	8003538 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f ae94 	bne.w	800326a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00010004 	.word	0x00010004
 800356c:	20000000 	.word	0x20000000
 8003570:	14f8b589 	.word	0x14f8b589

08003574 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	461a      	mov	r2, r3
 8003582:	4603      	mov	r3, r0
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	460b      	mov	r3, r1
 8003588:	813b      	strh	r3, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800358e:	f7fe fbcd 	bl	8001d2c <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b20      	cmp	r3, #32
 800359e:	f040 80d9 	bne.w	8003754 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2319      	movs	r3, #25
 80035a8:	2201      	movs	r2, #1
 80035aa:	496d      	ldr	r1, [pc, #436]	; (8003760 <HAL_I2C_Mem_Write+0x1ec>)
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fe11 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0cc      	b.n	8003756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_I2C_Mem_Write+0x56>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e0c5      	b.n	8003756 <HAL_I2C_Mem_Write+0x1e2>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d007      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2221      	movs	r2, #33	; 0x21
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a4d      	ldr	r2, [pc, #308]	; (8003764 <HAL_I2C_Mem_Write+0x1f0>)
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003632:	88f8      	ldrh	r0, [r7, #6]
 8003634:	893a      	ldrh	r2, [r7, #8]
 8003636:	8979      	ldrh	r1, [r7, #10]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4603      	mov	r3, r0
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fc48 	bl	8003ed8 <I2C_RequestMemoryWrite>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d052      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e081      	b.n	8003756 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fe92 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b04      	cmp	r3, #4
 8003668:	d107      	bne.n	800367a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06b      	b.n	8003756 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d11b      	bne.n	80036f4 <HAL_I2C_Mem_Write+0x180>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d017      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1aa      	bne.n	8003652 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fe7e 	bl	8004402 <I2C_WaitOnBTFFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2b04      	cmp	r3, #4
 8003712:	d107      	bne.n	8003724 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e016      	b.n	8003756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	00100002 	.word	0x00100002
 8003764:	ffff0000 	.word	0xffff0000

08003768 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08c      	sub	sp, #48	; 0x30
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	817b      	strh	r3, [r7, #10]
 800377a:	460b      	mov	r3, r1
 800377c:	813b      	strh	r3, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003786:	f7fe fad1 	bl	8001d2c <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b20      	cmp	r3, #32
 8003796:	f040 8244 	bne.w	8003c22 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2319      	movs	r3, #25
 80037a0:	2201      	movs	r2, #1
 80037a2:	4982      	ldr	r1, [pc, #520]	; (80039ac <HAL_I2C_Mem_Read+0x244>)
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fd15 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	e237      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Mem_Read+0x5a>
 80037be:	2302      	movs	r3, #2
 80037c0:	e230      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d007      	beq.n	80037e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	; 0x22
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a62      	ldr	r2, [pc, #392]	; (80039b0 <HAL_I2C_Mem_Read+0x248>)
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800382a:	88f8      	ldrh	r0, [r7, #6]
 800382c:	893a      	ldrh	r2, [r7, #8]
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	4603      	mov	r3, r0
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fbe2 	bl	8004004 <I2C_RequestMemoryRead>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1ec      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d113      	bne.n	800387a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e1c0      	b.n	8003bfc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	2b01      	cmp	r3, #1
 8003880:	d11e      	bne.n	80038c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003892:	b672      	cpsid	i
}
 8003894:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038bc:	b662      	cpsie	i
}
 80038be:	e035      	b.n	800392c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d11e      	bne.n	8003906 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038d8:	b672      	cpsid	i
}
 80038da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003900:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003902:	b662      	cpsie	i
}
 8003904:	e012      	b.n	800392c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800392c:	e166      	b.n	8003bfc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	2b03      	cmp	r3, #3
 8003934:	f200 811f 	bhi.w	8003b76 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b01      	cmp	r3, #1
 800393e:	d123      	bne.n	8003988 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fd9d 	bl	8004484 <I2C_WaitOnRXNEFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e167      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003986:	e139      	b.n	8003bfc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	2b02      	cmp	r3, #2
 800398e:	d152      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	2200      	movs	r2, #0
 8003998:	4906      	ldr	r1, [pc, #24]	; (80039b4 <HAL_I2C_Mem_Read+0x24c>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fc1a 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e13c      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
 80039aa:	bf00      	nop
 80039ac:	00100002 	.word	0x00100002
 80039b0:	ffff0000 	.word	0xffff0000
 80039b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039b8:	b672      	cpsid	i
}
 80039ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039fe:	b662      	cpsie	i
}
 8003a00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a34:	e0e2      	b.n	8003bfc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	497b      	ldr	r1, [pc, #492]	; (8003c2c <HAL_I2C_Mem_Read+0x4c4>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fbc7 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0e9      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a60:	b672      	cpsid	i
}
 8003a62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a96:	4b66      	ldr	r3, [pc, #408]	; (8003c30 <HAL_I2C_Mem_Read+0x4c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_I2C_Mem_Read+0x4cc>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a1a      	lsrs	r2, r3, #8
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00da      	lsls	r2, r3, #3
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d118      	bne.n	8003aee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ade:	b662      	cpsie	i
}
 8003ae0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e09a      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d1d9      	bne.n	8003ab0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3e:	b662      	cpsie	i
}
 8003b40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b74:	e042      	b.n	8003bfc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fc82 	bl	8004484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e04c      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d118      	bne.n	8003bfc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae94 	bne.w	800392e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	00010004 	.word	0x00010004
 8003c30:	20000000 	.word	0x20000000
 8003c34:	14f8b589 	.word	0x14f8b589

08003c38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d006      	beq.n	8003c62 <I2C_MasterRequestWrite+0x2a>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d003      	beq.n	8003c62 <I2C_MasterRequestWrite+0x2a>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c60:	d108      	bne.n	8003c74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e00b      	b.n	8003c8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	2b12      	cmp	r3, #18
 8003c7a:	d107      	bne.n	8003c8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fa9b 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb2:	d103      	bne.n	8003cbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e035      	b.n	8003d2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc8:	d108      	bne.n	8003cdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd8:	611a      	str	r2, [r3, #16]
 8003cda:	e01b      	b.n	8003d14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cdc:	897b      	ldrh	r3, [r7, #10]
 8003cde:	11db      	asrs	r3, r3, #7
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0306 	and.w	r3, r3, #6
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f063 030f 	orn	r3, r3, #15
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	490e      	ldr	r1, [pc, #56]	; (8003d34 <I2C_MasterRequestWrite+0xfc>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fac1 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e010      	b.n	8003d2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4907      	ldr	r1, [pc, #28]	; (8003d38 <I2C_MasterRequestWrite+0x100>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fab1 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010008 	.word	0x00010008
 8003d38:	00010002 	.word	0x00010002

08003d3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d006      	beq.n	8003d76 <I2C_MasterRequestRead+0x3a>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d003      	beq.n	8003d76 <I2C_MasterRequestRead+0x3a>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d74:	d108      	bne.n	8003d88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e00b      	b.n	8003da0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b11      	cmp	r3, #17
 8003d8e:	d107      	bne.n	8003da0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fa11 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc6:	d103      	bne.n	8003dd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e079      	b.n	8003ec8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ddc:	d108      	bne.n	8003df0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]
 8003dee:	e05f      	b.n	8003eb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003df0:	897b      	ldrh	r3, [r7, #10]
 8003df2:	11db      	asrs	r3, r3, #7
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0306 	and.w	r3, r3, #6
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f063 030f 	orn	r3, r3, #15
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4930      	ldr	r1, [pc, #192]	; (8003ed0 <I2C_MasterRequestRead+0x194>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa37 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e054      	b.n	8003ec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4929      	ldr	r1, [pc, #164]	; (8003ed4 <I2C_MasterRequestRead+0x198>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fa27 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e044      	b.n	8003ec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f9af 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d103      	bne.n	8003e94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e017      	b.n	8003ec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	11db      	asrs	r3, r3, #7
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0306 	and.w	r3, r3, #6
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f063 030e 	orn	r3, r3, #14
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4907      	ldr	r1, [pc, #28]	; (8003ed4 <I2C_MasterRequestRead+0x198>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9e3 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	00010008 	.word	0x00010008
 8003ed4:	00010002 	.word	0x00010002

08003ed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f960 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f28:	d103      	bne.n	8003f32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e05f      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	492d      	ldr	r1, [pc, #180]	; (8004000 <I2C_RequestMemoryWrite+0x128>)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f998 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e04c      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa02 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d107      	bne.n	8003f9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e02b      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa4:	893b      	ldrh	r3, [r7, #8]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	611a      	str	r2, [r3, #16]
 8003fae:	e021      	b.n	8003ff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb0:	893b      	ldrh	r3, [r7, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f9dc 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d107      	bne.n	8003fe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e005      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2200      	movs	r2, #0
 8004046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8c2 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004064:	d103      	bne.n	800406e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0aa      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	4952      	ldr	r1, [pc, #328]	; (80041d0 <I2C_RequestMemoryRead+0x1cc>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f8fa 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e097      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f964 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e076      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	e021      	b.n	8004130 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6a39      	ldr	r1, [r7, #32]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f93e 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e050      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	6a39      	ldr	r1, [r7, #32]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f923 	bl	8004380 <I2C_WaitOnTXEFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	2b04      	cmp	r3, #4
 8004146:	d107      	bne.n	8004158 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e035      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2200      	movs	r2, #0
 8004174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f82b 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d103      	bne.n	800419c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e013      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <I2C_RequestMemoryRead+0x1cc>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f863 	bl	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	00010002 	.word	0x00010002

080041d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	e025      	b.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d021      	beq.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fd fd9d 	bl	8001d2c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e023      	b.n	800427a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10d      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x84>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	e00c      	b.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	429a      	cmp	r2, r3
 8004276:	d0b6      	beq.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004290:	e051      	b.n	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a0:	d123      	bne.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0204 	orr.w	r2, r3, #4
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e046      	b.n	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d021      	beq.n	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fd fd1b 	bl	8001d2c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d116      	bne.n	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e020      	b.n	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10c      	bne.n	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e00b      	b.n	8004372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	43da      	mvns	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d18d      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800438c:	e02d      	b.n	80043ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8ce 	bl	8004530 <I2C_IsAcknowledgeFailed>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e02d      	b.n	80043fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d021      	beq.n	80043ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fd fcc1 	bl	8001d2c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d116      	bne.n	80043ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e007      	b.n	80043fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d1ca      	bne.n	800438e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800440e:	e02d      	b.n	800446c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f88d 	bl	8004530 <I2C_IsAcknowledgeFailed>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e02d      	b.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d021      	beq.n	800446c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004428:	f7fd fc80 	bl	8001d2c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d116      	bne.n	800446c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e007      	b.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b04      	cmp	r3, #4
 8004478:	d1ca      	bne.n	8004410 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004490:	e042      	b.n	8004518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b10      	cmp	r3, #16
 800449e:	d119      	bne.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0210 	mvn.w	r2, #16
 80044a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e029      	b.n	8004528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d4:	f7fd fc2a 	bl	8001d2c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d1b5      	bne.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004546:	d11b      	bne.n	8004580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e272      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8087 	beq.w	80046ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ac:	4b92      	ldr	r3, [pc, #584]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d00c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045b8:	4b8f      	ldr	r3, [pc, #572]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d112      	bne.n	80045ea <HAL_RCC_OscConfig+0x5e>
 80045c4:	4b8c      	ldr	r3, [pc, #560]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d10b      	bne.n	80045ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d2:	4b89      	ldr	r3, [pc, #548]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d06c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x12c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d168      	bne.n	80046b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e24c      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x76>
 80045f4:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a7f      	ldr	r2, [pc, #508]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e02e      	b.n	8004660 <HAL_RCC_OscConfig+0xd4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x98>
 800460a:	4b7b      	ldr	r3, [pc, #492]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7a      	ldr	r2, [pc, #488]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b78      	ldr	r3, [pc, #480]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a77      	ldr	r2, [pc, #476]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800461c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e01d      	b.n	8004660 <HAL_RCC_OscConfig+0xd4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0xbc>
 800462e:	4b72      	ldr	r3, [pc, #456]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a71      	ldr	r2, [pc, #452]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b6f      	ldr	r3, [pc, #444]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6e      	ldr	r2, [pc, #440]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0xd4>
 8004648:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6a      	ldr	r2, [pc, #424]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a67      	ldr	r2, [pc, #412]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fd fb60 	bl	8001d2c <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7fd fb5c 	bl	8001d2c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e200      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b5d      	ldr	r3, [pc, #372]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0xe4>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fd fb4c 	bl	8001d2c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fd fb48 	bl	8001d2c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1ec      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x10c>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d063      	beq.n	800478e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c6:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046d2:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x18c>
 80046de:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x176>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1c0      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4939      	ldr	r1, [pc, #228]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_RCC_OscConfig+0x270>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004726:	f7fd fb01 	bl	8001d2c <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fd fafd 	bl	8001d2c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1a1      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4927      	ldr	r1, [pc, #156]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <HAL_RCC_OscConfig+0x270>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fd fae0 	bl	8001d2c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004770:	f7fd fadc 	bl	8001d2c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e180      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03a      	beq.n	8004810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d019      	beq.n	80047d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a8:	f7fd fac0 	bl	8001d2c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fd fabc 	bl	8001d2c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e160      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ce:	2001      	movs	r0, #1
 80047d0:	f000 fb08 	bl	8004de4 <RCC_Delay>
 80047d4:	e01c      	b.n	8004810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047dc:	f7fd faa6 	bl	8001d2c <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e2:	e00f      	b.n	8004804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fd faa2 	bl	8001d2c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d908      	bls.n	8004804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e146      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	42420000 	.word	0x42420000
 8004800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	4b92      	ldr	r3, [pc, #584]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e9      	bne.n	80047e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80a6 	beq.w	800496a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	4b8b      	ldr	r3, [pc, #556]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10d      	bne.n	800484a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	4b88      	ldr	r3, [pc, #544]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4a87      	ldr	r2, [pc, #540]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	61d3      	str	r3, [r2, #28]
 800483a:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b82      	ldr	r3, [pc, #520]	; (8004a54 <HAL_RCC_OscConfig+0x4c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b7f      	ldr	r3, [pc, #508]	; (8004a54 <HAL_RCC_OscConfig+0x4c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7e      	ldr	r2, [pc, #504]	; (8004a54 <HAL_RCC_OscConfig+0x4c8>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fd fa63 	bl	8001d2c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fd fa5f 	bl	8001d2c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b64      	cmp	r3, #100	; 0x64
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e103      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	4b75      	ldr	r3, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0x4c8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x312>
 8004890:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4a6e      	ldr	r2, [pc, #440]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6213      	str	r3, [r2, #32]
 800489c:	e02d      	b.n	80048fa <HAL_RCC_OscConfig+0x36e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x334>
 80048a6:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a69      	ldr	r2, [pc, #420]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	4b67      	ldr	r3, [pc, #412]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a66      	ldr	r2, [pc, #408]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
 80048be:	e01c      	b.n	80048fa <HAL_RCC_OscConfig+0x36e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d10c      	bne.n	80048e2 <HAL_RCC_OscConfig+0x356>
 80048c8:	4b61      	ldr	r3, [pc, #388]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4a60      	ldr	r2, [pc, #384]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	4b5e      	ldr	r3, [pc, #376]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4a5d      	ldr	r2, [pc, #372]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6213      	str	r3, [r2, #32]
 80048e0:	e00b      	b.n	80048fa <HAL_RCC_OscConfig+0x36e>
 80048e2:	4b5b      	ldr	r3, [pc, #364]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4a5a      	ldr	r2, [pc, #360]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	6213      	str	r3, [r2, #32]
 80048ee:	4b58      	ldr	r3, [pc, #352]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a57      	ldr	r2, [pc, #348]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d015      	beq.n	800492e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fd fa13 	bl	8001d2c <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fd fa0f 	bl	8001d2c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0b1      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ee      	beq.n	800490a <HAL_RCC_OscConfig+0x37e>
 800492c:	e014      	b.n	8004958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7fd f9fd 	bl	8001d2c <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fd f9f9 	bl	8001d2c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e09b      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494c:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ee      	bne.n	8004936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	4b3c      	ldr	r3, [pc, #240]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8087 	beq.w	8004a82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d061      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d146      	bne.n	8004a16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b33      	ldr	r3, [pc, #204]	; (8004a58 <HAL_RCC_OscConfig+0x4cc>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd f9cd 	bl	8001d2c <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004996:	f7fd f9c9 	bl	8001d2c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e06d      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a8:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d108      	bne.n	80049d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4921      	ldr	r1, [pc, #132]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d0:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a19      	ldr	r1, [r3, #32]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	430b      	orrs	r3, r1
 80049e2:	491b      	ldr	r1, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <HAL_RCC_OscConfig+0x4cc>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fd f99d 	bl	8001d2c <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fd f999 	bl	8001d2c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e03d      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x46a>
 8004a14:	e035      	b.n	8004a82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_RCC_OscConfig+0x4cc>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd f986 	bl	8001d2c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fd f982 	bl	8001d2c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e026      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x498>
 8004a42:	e01e      	b.n	8004a82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e019      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40007000 	.word	0x40007000
 8004a58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCC_OscConfig+0x500>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0d0      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d910      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 0207 	bic.w	r2, r3, #7
 8004aba:	4965      	ldr	r1, [pc, #404]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0b8      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aec:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004af6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b10:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	494d      	ldr	r1, [pc, #308]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d040      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d115      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07f      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e073      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06b      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6e:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4936      	ldr	r1, [pc, #216]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b80:	f7fd f8d4 	bl	8001d2c <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fd f8d0 	bl	8001d2c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e053      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 020c 	and.w	r2, r3, #12
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1eb      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d210      	bcs.n	8004be0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 0207 	bic.w	r2, r3, #7
 8004bc6:	4922      	ldr	r1, [pc, #136]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e032      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4916      	ldr	r1, [pc, #88]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	490e      	ldr	r1, [pc, #56]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c1e:	f000 f821 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c22:	4602      	mov	r2, r0
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	490a      	ldr	r1, [pc, #40]	; (8004c58 <HAL_RCC_ClockConfig+0x1c8>)
 8004c30:	5ccb      	ldrb	r3, [r1, r3]
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <HAL_RCC_ClockConfig+0x1cc>)
 8004c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1d0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc fe66 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40021000 	.word	0x40021000
 8004c58:	08009b78 	.word	0x08009b78
 8004c5c:	20000000 	.word	0x20000000
 8004c60:	20000004 	.word	0x20000004

08004c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b490      	push	{r4, r7}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c6a:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_RCC_GetSysClockFreq+0xac>)
 8004c6c:	1d3c      	adds	r4, r7, #4
 8004c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c74:	f240 2301 	movw	r3, #513	; 0x201
 8004c78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c8e:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0x46>
 8004ca2:	e02b      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ca6:	623b      	str	r3, [r7, #32]
      break;
 8004ca8:	e02b      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	0c9b      	lsrs	r3, r3, #18
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	3328      	adds	r3, #40	; 0x28
 8004cb4:	443b      	add	r3, r7
 8004cb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d012      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cc6:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	0c5b      	lsrs	r3, r3, #17
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	3328      	adds	r3, #40	; 0x28
 8004cd2:	443b      	add	r3, r7
 8004cd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cde:	fb03 f202 	mul.w	r2, r3, r2
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	e004      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	623b      	str	r3, [r7, #32]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cfe:	623b      	str	r3, [r7, #32]
      break;
 8004d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d02:	6a3b      	ldr	r3, [r7, #32]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3728      	adds	r7, #40	; 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc90      	pop	{r4, r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	08009aa0 	.word	0x08009aa0
 8004d14:	40021000 	.word	0x40021000
 8004d18:	007a1200 	.word	0x007a1200
 8004d1c:	003d0900 	.word	0x003d0900

08004d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr
 8004d30:	20000000 	.word	0x20000000

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d38:	f7ff fff2 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	08009b88 	.word	0x08009b88

08004d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d60:	f7ff ffde 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	0adb      	lsrs	r3, r3, #11
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	08009b88 	.word	0x08009b88

08004d84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	220f      	movs	r2, #15
 8004d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCC_GetClockConfig+0x58>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 0203 	and.w	r2, r3, #3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <HAL_RCC_GetClockConfig+0x58>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_GetClockConfig+0x58>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_RCC_GetClockConfig+0x58>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0207 	and.w	r2, r3, #7
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40022000 	.word	0x40022000

08004de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dec:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <RCC_Delay+0x34>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <RCC_Delay+0x38>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	0a5b      	lsrs	r3, r3, #9
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e00:	bf00      	nop
  }
  while (Delay --);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	60fa      	str	r2, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f9      	bne.n	8004e00 <RCC_Delay+0x1c>
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	10624dd3 	.word	0x10624dd3

08004e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d07d      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e40:	4b4f      	ldr	r3, [pc, #316]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4c:	4b4c      	ldr	r3, [pc, #304]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4a4b      	ldr	r2, [pc, #300]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	61d3      	str	r3, [r2, #28]
 8004e58:	4b49      	ldr	r3, [pc, #292]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	4b46      	ldr	r3, [pc, #280]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d118      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a42      	ldr	r2, [pc, #264]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e80:	f7fc ff54 	bl	8001d2c <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e88:	f7fc ff50 	bl	8001d2c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e06d      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02e      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d027      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ece:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed4:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eda:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fc ff1f 	bl	8001d2c <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fc ff1b 	bl	8001d2c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e036      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ee      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4917      	ldr	r1, [pc, #92]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d105      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	490b      	ldr	r1, [pc, #44]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	4904      	ldr	r1, [pc, #16]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
 8004f88:	42420440 	.word	0x42420440

08004f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b08d      	sub	sp, #52	; 0x34
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f94:	4b58      	ldr	r3, [pc, #352]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004f96:	f107 040c 	add.w	r4, r7, #12
 8004f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fa0:	f240 2301 	movw	r3, #513	; 0x201
 8004fa4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004faa:	2300      	movs	r3, #0
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fae:	2300      	movs	r3, #0
 8004fb0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	f200 808e 	bhi.w	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d049      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d079      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004fd4:	e086      	b.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fdc:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d07f      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	0c9b      	lsrs	r3, r3, #18
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	3330      	adds	r3, #48	; 0x30
 8004ff2:	443b      	add	r3, r7
 8004ff4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ff8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d017      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005004:	4b3d      	ldr	r3, [pc, #244]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0c5b      	lsrs	r3, r3, #17
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	3330      	adds	r3, #48	; 0x30
 8005010:	443b      	add	r3, r7
 8005012:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005022:	4a37      	ldr	r2, [pc, #220]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	fbb2 f2f3 	udiv	r2, r2, r3
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005032:	e004      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	4a33      	ldr	r2, [pc, #204]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504a:	d102      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005050:	e04a      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4a2c      	ldr	r2, [pc, #176]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005060:	e042      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8005062:	4b26      	ldr	r3, [pc, #152]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d108      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
 8005084:	e01f      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005090:	d109      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800509e:	f649 4340 	movw	r3, #40000	; 0x9c40
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a4:	e00f      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b0:	d11c      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80050be:	f24f 4324 	movw	r3, #62500	; 0xf424
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050c4:	e012      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80050c6:	e011      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050c8:	f7ff fe48 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0b9b      	lsrs	r3, r3, #14
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	3301      	adds	r3, #1
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050e2:	e004      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80050ec:	bf00      	nop
    }
  }
  return (frequency);
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3734      	adds	r7, #52	; 0x34
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd90      	pop	{r4, r7, pc}
 80050f8:	08009ab0 	.word	0x08009ab0
 80050fc:	40021000 	.word	0x40021000
 8005100:	007a1200 	.word	0x007a1200
 8005104:	003d0900 	.word	0x003d0900
 8005108:	aaaaaaab 	.word	0xaaaaaaab

0800510c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e076      	b.n	800520c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512e:	d009      	beq.n	8005144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	61da      	str	r2, [r3, #28]
 8005136:	e005      	b.n	8005144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc fb4c 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	ea42 0103 	orr.w	r1, r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	0c1a      	lsrs	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f002 0204 	and.w	r2, r2, #4
 80051ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69da      	ldr	r2, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Transmit+0x22>
 8005232:	2302      	movs	r3, #2
 8005234:	e126      	b.n	8005484 <HAL_SPI_Transmit+0x270>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523e:	f7fc fd75 	bl	8001d2c <HAL_GetTick>
 8005242:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d002      	beq.n	800525a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005254:	2302      	movs	r3, #2
 8005256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005258:	e10b      	b.n	8005472 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_SPI_Transmit+0x52>
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	77fb      	strb	r3, [r7, #31]
    goto error;
 800526a:	e102      	b.n	8005472 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2203      	movs	r2, #3
 8005270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	88fa      	ldrh	r2, [r7, #6]
 800528a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	d10f      	bne.n	80052d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d007      	beq.n	80052f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fa:	d14b      	bne.n	8005394 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_SPI_Transmit+0xf6>
 8005304:	8afb      	ldrh	r3, [r7, #22]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d13e      	bne.n	8005388 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800532e:	e02b      	b.n	8005388 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d112      	bne.n	8005364 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	1c9a      	adds	r2, r3, #2
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	86da      	strh	r2, [r3, #54]	; 0x36
 8005362:	e011      	b.n	8005388 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005364:	f7fc fce2 	bl	8001d2c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d803      	bhi.n	800537c <HAL_SPI_Transmit+0x168>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d102      	bne.n	8005382 <HAL_SPI_Transmit+0x16e>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005386:	e074      	b.n	8005472 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ce      	bne.n	8005330 <HAL_SPI_Transmit+0x11c>
 8005392:	e04c      	b.n	800542e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_SPI_Transmit+0x18e>
 800539c:	8afb      	ldrh	r3, [r7, #22]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d140      	bne.n	8005424 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053c8:	e02c      	b.n	8005424 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d113      	bne.n	8005400 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80053fe:	e011      	b.n	8005424 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005400:	f7fc fc94 	bl	8001d2c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d803      	bhi.n	8005418 <HAL_SPI_Transmit+0x204>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d102      	bne.n	800541e <HAL_SPI_Transmit+0x20a>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005422:	e026      	b.n	8005472 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1cd      	bne.n	80053ca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f8b2 	bl	800559c <SPI_EndRxTxTransaction>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e000      	b.n	8005472 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005470:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005482:	7ffb      	ldrb	r3, [r7, #31]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800549c:	f7fc fc46 	bl	8001d2c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ac:	f7fc fc3e 	bl	8001d2c <HAL_GetTick>
 80054b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054b2:	4b39      	ldr	r3, [pc, #228]	; (8005598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	015b      	lsls	r3, r3, #5
 80054b8:	0d1b      	lsrs	r3, r3, #20
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c2:	e054      	b.n	800556e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d050      	beq.n	800556e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054cc:	f7fc fc2e 	bl	8001d2c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d902      	bls.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d13d      	bne.n	800555e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fa:	d111      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005504:	d004      	beq.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	d107      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005528:	d10f      	bne.n	800554a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e017      	b.n	800558e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	429a      	cmp	r2, r3
 800558a:	d19b      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000000 	.word	0x20000000

0800559c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff ff6a 	bl	800548c <SPI_WaitFlagStateUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e000      	b.n	80055d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e041      	b.n	800566e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fc f946 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f000 fa9e 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e03a      	b.n	8005706 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a18      	ldr	r2, [pc, #96]	; (8005710 <HAL_TIM_Base_Start_IT+0x98>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x58>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ba:	d009      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x58>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a14      	ldr	r2, [pc, #80]	; (8005714 <HAL_TIM_Base_Start_IT+0x9c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x58>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a13      	ldr	r2, [pc, #76]	; (8005718 <HAL_TIM_Base_Start_IT+0xa0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d010      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	e007      	b.n	8005704 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	f241 1311 	movw	r3, #4369	; 0x1111
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10f      	bne.n	8005764 <HAL_TIM_Base_Stop_IT+0x48>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	f240 4344 	movw	r3, #1092	; 0x444
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d107      	bne.n	8005764 <HAL_TIM_Base_Stop_IT+0x48>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d122      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b02      	cmp	r3, #2
 800579a:	d11b      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0202 	mvn.w	r2, #2
 80057a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9b1 	bl	8005b22 <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9a4 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9b3 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d122      	bne.n	8005828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d11b      	bne.n	8005828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0204 	mvn.w	r2, #4
 80057f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f987 	bl	8005b22 <HAL_TIM_IC_CaptureCallback>
 8005814:	e005      	b.n	8005822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f97a 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f989 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b08      	cmp	r3, #8
 8005834:	d122      	bne.n	800587c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b08      	cmp	r3, #8
 8005842:	d11b      	bne.n	800587c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0208 	mvn.w	r2, #8
 800584c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2204      	movs	r2, #4
 8005852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f95d 	bl	8005b22 <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f950 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f95f 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b10      	cmp	r3, #16
 8005888:	d122      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b10      	cmp	r3, #16
 8005896:	d11b      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0210 	mvn.w	r2, #16
 80058a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2208      	movs	r2, #8
 80058a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f933 	bl	8005b22 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f926 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f935 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d10e      	bne.n	80058fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d107      	bne.n	80058fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0201 	mvn.w	r2, #1
 80058f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fb fe54 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b80      	cmp	r3, #128	; 0x80
 8005908:	d10e      	bne.n	8005928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d107      	bne.n	8005928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa77 	bl	8005e16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8f9 	bl	8005b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0220 	mvn.w	r2, #32
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa42 	bl	8005e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_ConfigClockSource+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e0b3      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x180>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d03e      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xd0>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	f200 8087 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	f000 8085 	beq.w	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d87f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d01a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xa2>
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d87b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d050      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x116>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d877      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a00:	2b50      	cmp	r3, #80	; 0x50
 8005a02:	d03c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xf6>
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d873      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d058      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x136>
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d86f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d064      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d86b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d060      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d867      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d05a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a28:	e062      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f000 f966 	bl	8005d0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04e      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f000 f94f 	bl	8005d0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e03b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 f8c6 	bl	8005c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f91d 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e02b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f8e4 	bl	8005c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f90d 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e01b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f8a6 	bl	8005c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f8fd 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e00b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 f8f4 	bl	8005cd6 <TIM_ITRx_SetConfig>
        break;
 8005aee:	e002      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <TIM_Base_SetConfig+0xb8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0x30>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0x30>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <TIM_Base_SetConfig+0xbc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x30>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a25      	ldr	r2, [pc, #148]	; (8005c18 <TIM_Base_SetConfig+0xc0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <TIM_Base_SetConfig+0xb8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0x62>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0x62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <TIM_Base_SetConfig+0xbc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0x62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <TIM_Base_SetConfig+0xc0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a07      	ldr	r2, [pc, #28]	; (8005c10 <TIM_Base_SetConfig+0xb8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	615a      	str	r2, [r3, #20]
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800

08005c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f023 0201 	bic.w	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 030a 	bic.w	r3, r3, #10
 8005c58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f023 0210 	bic.w	r2, r3, #16
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	031b      	lsls	r3, r3, #12
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f043 0307 	orr.w	r3, r3, #7
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	609a      	str	r2, [r3, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e046      	b.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dac:	d009      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a10      	ldr	r2, [pc, #64]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10c      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800

08005e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e2e:	f3ef 8305 	mrs	r3, IPSR
 8005e32:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3e:	607b      	str	r3, [r7, #4]
  return(result);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <osKernelInitialize+0x32>
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <osKernelInitialize+0x60>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d109      	bne.n	8005e62 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e52:	603b      	str	r3, [r7, #0]
  return(result);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005e5a:	f06f 0305 	mvn.w	r3, #5
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e00c      	b.n	8005e7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <osKernelInitialize+0x60>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <osKernelInitialize+0x60>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e002      	b.n	8005e7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr
 8005e88:	200002cc 	.word	0x200002cc

08005e8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e92:	f3ef 8305 	mrs	r3, IPSR
 8005e96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <osKernelStart+0x32>
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <osKernelStart+0x64>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d109      	bne.n	8005ec6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005ebe:	f06f 0305 	mvn.w	r3, #5
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e00e      	b.n	8005ee4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <osKernelStart+0x64>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <osKernelStart+0x64>)
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ed4:	f001 fbda 	bl	800768c <vTaskStartScheduler>
      stat = osOK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e002      	b.n	8005ee4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005ede:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200002cc 	.word	0x200002cc

08005ef4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b092      	sub	sp, #72	; 0x48
 8005ef8:	af04      	add	r7, sp, #16
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f04:	f3ef 8305 	mrs	r3, IPSR
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8094 	bne.w	800603a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f12:	f3ef 8310 	mrs	r3, PRIMASK
 8005f16:	623b      	str	r3, [r7, #32]
  return(result);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 808d 	bne.w	800603a <osThreadNew+0x146>
 8005f20:	4b48      	ldr	r3, [pc, #288]	; (8006044 <osThreadNew+0x150>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d106      	bne.n	8005f36 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f28:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 8082 	bne.w	800603a <osThreadNew+0x146>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d07e      	beq.n	800603a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005f40:	2318      	movs	r3, #24
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005f44:	2300      	movs	r3, #0
 8005f46:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005f48:	f107 031b 	add.w	r3, r7, #27
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d045      	beq.n	8005fe6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <osThreadNew+0x74>
        name = attr->name;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <osThreadNew+0x9a>
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	2b38      	cmp	r3, #56	; 0x38
 8005f80:	d805      	bhi.n	8005f8e <osThreadNew+0x9a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <osThreadNew+0x9e>
        return (NULL);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e054      	b.n	800603c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00e      	beq.n	8005fc8 <osThreadNew+0xd4>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b5b      	cmp	r3, #91	; 0x5b
 8005fb0:	d90a      	bls.n	8005fc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d006      	beq.n	8005fc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <osThreadNew+0xd4>
        mem = 1;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc6:	e010      	b.n	8005fea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10c      	bne.n	8005fea <osThreadNew+0xf6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <osThreadNew+0xf6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <osThreadNew+0xf6>
          mem = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe4:	e001      	b.n	8005fea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d110      	bne.n	8006012 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006004:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 f974 	bl	80072f4 <xTaskCreateStatic>
 800600c:	4603      	mov	r3, r0
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e013      	b.n	800603a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	b29a      	uxth	r2, r3
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f001 f9be 	bl	80073ac <xTaskCreate>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <osThreadNew+0x146>
          hTask = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3738      	adds	r7, #56	; 0x38
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	200002cc 	.word	0x200002cc

08006048 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006050:	f3ef 8305 	mrs	r3, IPSR
 8006054:	613b      	str	r3, [r7, #16]
  return(result);
 8006056:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10f      	bne.n	800607c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800605c:	f3ef 8310 	mrs	r3, PRIMASK
 8006060:	60fb      	str	r3, [r7, #12]
  return(result);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <osDelay+0x34>
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <osDelay+0x58>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d109      	bne.n	8006084 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006070:	f3ef 8311 	mrs	r3, BASEPRI
 8006074:	60bb      	str	r3, [r7, #8]
  return(result);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <osDelay+0x3c>
    stat = osErrorISR;
 800607c:	f06f 0305 	mvn.w	r3, #5
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e007      	b.n	8006094 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <osDelay+0x4c>
      vTaskDelay(ticks);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fac8 	bl	8007624 <vTaskDelay>
    }
  }

  return (stat);
 8006094:	697b      	ldr	r3, [r7, #20]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200002cc 	.word	0x200002cc

080060a4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b0:	f3ef 8305 	mrs	r3, IPSR
 80060b4:	613b      	str	r3, [r7, #16]
  return(result);
 80060b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 8085 	bne.w	80061c8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060be:	f3ef 8310 	mrs	r3, PRIMASK
 80060c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d17e      	bne.n	80061c8 <osMutexNew+0x124>
 80060ca:	4b42      	ldr	r3, [pc, #264]	; (80061d4 <osMutexNew+0x130>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d105      	bne.n	80060de <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060d2:	f3ef 8311 	mrs	r3, BASEPRI
 80060d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d174      	bne.n	80061c8 <osMutexNew+0x124>
    if (attr != NULL) {
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <osMutexNew+0x48>
      type = attr->attr_bits;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	e001      	b.n	80060f0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <osMutexNew+0x5c>
      rmtx = 1U;
 80060fa:	2301      	movs	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	e001      	b.n	8006104 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d15c      	bne.n	80061c8 <osMutexNew+0x124>
      mem = -1;
 800610e:	f04f 33ff 	mov.w	r3, #4294967295
 8006112:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d015      	beq.n	8006146 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <osMutexNew+0x8c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b4f      	cmp	r3, #79	; 0x4f
 8006128:	d902      	bls.n	8006130 <osMutexNew+0x8c>
          mem = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	e00c      	b.n	800614a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d108      	bne.n	800614a <osMutexNew+0xa6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <osMutexNew+0xa6>
            mem = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e001      	b.n	800614a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d112      	bne.n	8006176 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	4619      	mov	r1, r3
 800615c:	2004      	movs	r0, #4
 800615e:	f000 fb3d 	bl	80067dc <xQueueCreateMutexStatic>
 8006162:	6278      	str	r0, [r7, #36]	; 0x24
 8006164:	e016      	b.n	8006194 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4619      	mov	r1, r3
 800616c:	2001      	movs	r0, #1
 800616e:	f000 fb35 	bl	80067dc <xQueueCreateMutexStatic>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24
 8006174:	e00e      	b.n	8006194 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006182:	2004      	movs	r0, #4
 8006184:	f000 fb12 	bl	80067ac <xQueueCreateMutex>
 8006188:	6278      	str	r0, [r7, #36]	; 0x24
 800618a:	e003      	b.n	8006194 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800618c:	2001      	movs	r0, #1
 800618e:	f000 fb0d 	bl	80067ac <xQueueCreateMutex>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <osMutexNew+0x110>
        if (attr != NULL) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <osMutexNew+0x104>
          name = attr->name;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e001      	b.n	80061ac <osMutexNew+0x108>
        } else {
          name = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80061ac:	6979      	ldr	r1, [r7, #20]
 80061ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061b0:	f001 f844 	bl	800723c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d006      	beq.n	80061c8 <osMutexNew+0x124>
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	200002cc 	.word	0x200002cc

080061d8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f6:	f3ef 8305 	mrs	r3, IPSR
 80061fa:	613b      	str	r3, [r7, #16]
  return(result);
 80061fc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10f      	bne.n	8006222 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006202:	f3ef 8310 	mrs	r3, PRIMASK
 8006206:	60fb      	str	r3, [r7, #12]
  return(result);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <osMutexAcquire+0x4a>
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <osMutexAcquire+0xb8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d109      	bne.n	800622a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006216:	f3ef 8311 	mrs	r3, BASEPRI
 800621a:	60bb      	str	r3, [r7, #8]
  return(result);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006222:	f06f 0305 	mvn.w	r3, #5
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	e02c      	b.n	8006284 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006230:	f06f 0303 	mvn.w	r3, #3
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e025      	b.n	8006284 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d011      	beq.n	8006262 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f000 fb1a 	bl	800687a <xQueueTakeMutexRecursive>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d01b      	beq.n	8006284 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006252:	f06f 0301 	mvn.w	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	e014      	b.n	8006284 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800625a:	f06f 0302 	mvn.w	r3, #2
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	e010      	b.n	8006284 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	69b8      	ldr	r0, [r7, #24]
 8006266:	f000 fdb5 	bl	8006dd4 <xQueueSemaphoreTake>
 800626a:	4603      	mov	r3, r0
 800626c:	2b01      	cmp	r3, #1
 800626e:	d009      	beq.n	8006284 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006276:	f06f 0301 	mvn.w	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e002      	b.n	8006284 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800627e:	f06f 0302 	mvn.w	r3, #2
 8006282:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006284:	69fb      	ldr	r3, [r7, #28]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200002cc 	.word	0x200002cc

08006294 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b0:	f3ef 8305 	mrs	r3, IPSR
 80062b4:	613b      	str	r3, [r7, #16]
  return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10f      	bne.n	80062dc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062bc:	f3ef 8310 	mrs	r3, PRIMASK
 80062c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <osMutexRelease+0x48>
 80062c8:	4b19      	ldr	r3, [pc, #100]	; (8006330 <osMutexRelease+0x9c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d109      	bne.n	80062e4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062d0:	f3ef 8311 	mrs	r3, BASEPRI
 80062d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80062dc:	f06f 0305 	mvn.w	r3, #5
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	e01f      	b.n	8006324 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80062ea:	f06f 0303 	mvn.w	r3, #3
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e018      	b.n	8006324 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80062f8:	69b8      	ldr	r0, [r7, #24]
 80062fa:	f000 fa8a 	bl	8006812 <xQueueGiveMutexRecursive>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b01      	cmp	r3, #1
 8006302:	d00f      	beq.n	8006324 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006304:	f06f 0302 	mvn.w	r3, #2
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e00b      	b.n	8006324 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800630c:	2300      	movs	r3, #0
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	69b8      	ldr	r0, [r7, #24]
 8006314:	f000 fae8 	bl	80068e8 <xQueueGenericSend>
 8006318:	4603      	mov	r3, r0
 800631a:	2b01      	cmp	r3, #1
 800631c:	d002      	beq.n	8006324 <osMutexRelease+0x90>
        stat = osErrorResource;
 800631e:	f06f 0302 	mvn.w	r3, #2
 8006322:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006324:	69fb      	ldr	r3, [r7, #28]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	200002cc 	.word	0x200002cc

08006334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4a06      	ldr	r2, [pc, #24]	; (800635c <vApplicationGetIdleTaskMemory+0x28>)
 8006344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <vApplicationGetIdleTaskMemory+0x2c>)
 800634a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2280      	movs	r2, #128	; 0x80
 8006350:	601a      	str	r2, [r3, #0]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	200002d0 	.word	0x200002d0
 8006360:	2000032c 	.word	0x2000032c

08006364 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a07      	ldr	r2, [pc, #28]	; (8006390 <vApplicationGetTimerTaskMemory+0x2c>)
 8006374:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4a06      	ldr	r2, [pc, #24]	; (8006394 <vApplicationGetTimerTaskMemory+0x30>)
 800637a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000052c 	.word	0x2000052c
 8006394:	20000588 	.word	0x20000588

08006398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f103 0208 	add.w	r2, r3, #8
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f04f 32ff 	mov.w	r2, #4294967295
 80063b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f103 0208 	add.w	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f103 0208 	add.w	r2, r3, #8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d103      	bne.n	8006454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e00c      	b.n	800646e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3308      	adds	r3, #8
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e002      	b.n	8006462 <vListInsert+0x2e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	d2f6      	bcs.n	800645c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6892      	ldr	r2, [r2, #8]
 80064ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6852      	ldr	r2, [r2, #4]
 80064c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d103      	bne.n	80064d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	1e5a      	subs	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr
	...

080064f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006522:	f002 fafb 	bl	8008b1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006532:	fb01 f303 	mul.w	r3, r1, r3
 8006536:	441a      	add	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	3b01      	subs	r3, #1
 8006554:	68f9      	ldr	r1, [r7, #12]
 8006556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	22ff      	movs	r2, #255	; 0xff
 8006566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d114      	bne.n	80065a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01a      	beq.n	80065b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3310      	adds	r3, #16
 8006584:	4618      	mov	r0, r3
 8006586:	f001 fb0b 	bl	8007ba0 <xTaskRemoveFromEventList>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d012      	beq.n	80065b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <xQueueGenericReset+0xcc>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	e009      	b.n	80065b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3310      	adds	r3, #16
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fef6 	bl	8006398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3324      	adds	r3, #36	; 0x24
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fef1 	bl	8006398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065b6:	f002 fae1 	bl	8008b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065ba:	2301      	movs	r3, #1
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08e      	sub	sp, #56	; 0x38
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <xQueueGenericCreateStatic+0x52>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <xQueueGenericCreateStatic+0x56>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueGenericCreateStatic+0x58>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	623b      	str	r3, [r7, #32]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <xQueueGenericCreateStatic+0x7e>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <xQueueGenericCreateStatic+0x82>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <xQueueGenericCreateStatic+0x84>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	61fb      	str	r3, [r7, #28]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006666:	2350      	movs	r3, #80	; 0x50
 8006668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d00a      	beq.n	8006686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	61bb      	str	r3, [r7, #24]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00d      	beq.n	80066ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006698:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f843 	bl	8006732 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3730      	adds	r7, #48	; 0x30
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08a      	sub	sp, #40	; 0x28
 80066ba:	af02      	add	r7, sp, #8
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	4613      	mov	r3, r2
 80066c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	613b      	str	r3, [r7, #16]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e004      	b.n	80066f6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	fb02 f303 	mul.w	r3, r2, r3
 80066f4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3350      	adds	r3, #80	; 0x50
 80066fa:	4618      	mov	r0, r3
 80066fc:	f002 fb0e 	bl	8008d1c <pvPortMalloc>
 8006700:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	3350      	adds	r3, #80	; 0x50
 800670c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006716:	79fa      	ldrb	r2, [r7, #7]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f805 	bl	8006732 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006728:	69bb      	ldr	r3, [r7, #24]
	}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e002      	b.n	8006754 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006760:	2101      	movs	r1, #1
 8006762:	69b8      	ldr	r0, [r7, #24]
 8006764:	f7ff fec8 	bl	80064f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006798:	2300      	movs	r3, #0
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f8a2 	bl	80068e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6939      	ldr	r1, [r7, #16]
 80067c4:	6978      	ldr	r0, [r7, #20]
 80067c6:	f7ff ff76 	bl	80066b6 <xQueueGenericCreate>
 80067ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ffd3 	bl	8006778 <prvInitialiseMutex>

		return pxNewQueue;
 80067d2:	68fb      	ldr	r3, [r7, #12]
	}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	4603      	mov	r3, r0
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	6939      	ldr	r1, [r7, #16]
 80067fa:	6978      	ldr	r0, [r7, #20]
 80067fc:	f7ff fee4 	bl	80065c8 <xQueueGenericCreateStatic>
 8006800:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff ffb8 	bl	8006778 <prvInitialiseMutex>

		return pxNewQueue;
 8006808:	68fb      	ldr	r3, [r7, #12]
	}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006812:	b590      	push	{r4, r7, lr}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	685c      	ldr	r4, [r3, #4]
 800683e:	f001 fb71 	bl	8007f24 <xTaskGetCurrentTaskHandle>
 8006842:	4603      	mov	r3, r0
 8006844:	429c      	cmp	r4, r3
 8006846:	d111      	bne.n	800686c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	6938      	ldr	r0, [r7, #16]
 8006862:	f000 f841 	bl	80068e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006866:	2301      	movs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	e001      	b.n	8006870 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006870:	697b      	ldr	r3, [r7, #20]
	}
 8006872:	4618      	mov	r0, r3
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	bd90      	pop	{r4, r7, pc}

0800687a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800687a:	b590      	push	{r4, r7, lr}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685c      	ldr	r4, [r3, #4]
 80068a8:	f001 fb3c 	bl	8007f24 <xTaskGetCurrentTaskHandle>
 80068ac:	4603      	mov	r3, r0
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d107      	bne.n	80068c2 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e00c      	b.n	80068dc <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6938      	ldr	r0, [r7, #16]
 80068c6:	f000 fa85 	bl	8006dd4 <xQueueSemaphoreTake>
 80068ca:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80068dc:	697b      	ldr	r3, [r7, #20]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd90      	pop	{r4, r7, pc}
	...

080068e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericSend+0x32>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <xQueueGenericSend+0x40>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSend+0x44>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueGenericSend+0x46>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueGenericSend+0x60>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x6e>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSend+0x72>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSend+0x74>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericSend+0x8e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	623b      	str	r3, [r7, #32]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006976:	f001 fae3 	bl	8007f40 <xTaskGetSchedulerState>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xQueueGenericSend+0x9e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueGenericSend+0xa2>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericSend+0xa4>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a6:	f002 f8b9 	bl	8008b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <xQueueGenericSend+0xd4>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d129      	bne.n	8006a10 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c2:	f000 fb2a 	bl	800701a <prvCopyDataToQueue>
 80069c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d010      	beq.n	80069f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 f8e3 	bl	8007ba0 <xTaskRemoveFromEventList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d013      	beq.n	8006a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	e00a      	b.n	8006a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a08:	f002 f8b8 	bl	8008b7c <vPortExitCritical>
				return pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e063      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a16:	f002 f8b1 	bl	8008b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e05c      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 f91d 	bl	8007c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a32:	f002 f8a3 	bl	8008b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a36:	f000 fe8f 	bl	8007758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a3a:	f002 f86f 	bl	8008b1c <vPortEnterCritical>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d103      	bne.n	8006a54 <xQueueGenericSend+0x16c>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d103      	bne.n	8006a6a <xQueueGenericSend+0x182>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6a:	f002 f887 	bl	8008b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6e:	1d3a      	adds	r2, r7, #4
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f90c 	bl	8007c94 <xTaskCheckForTimeOut>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d124      	bne.n	8006acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a84:	f000 fbc1 	bl	800720a <prvIsQueueFull>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d018      	beq.n	8006ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3310      	adds	r3, #16
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f832 	bl	8007b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9e:	f000 fb4c 	bl	800713a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aa2:	f000 fe67 	bl	8007774 <xTaskResumeAll>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f af7c 	bne.w	80069a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	e772      	b.n	80069a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fb3a 	bl	800713a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac6:	f000 fe55 	bl	8007774 <xTaskResumeAll>
 8006aca:	e76c      	b.n	80069a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ace:	f000 fb34 	bl	800713a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad2:	f000 fe4f 	bl	8007774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad6:	2300      	movs	r3, #0
		}
	}
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3738      	adds	r7, #56	; 0x38
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08e      	sub	sp, #56	; 0x38
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueGenericSendFromISR+0x3c>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSendFromISR+0x40>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSendFromISR+0x42>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	623b      	str	r3, [r7, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d103      	bne.n	8006b4e <xQueueGenericSendFromISR+0x6a>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <xQueueGenericSendFromISR+0x6e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <xQueueGenericSendFromISR+0x70>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61fb      	str	r3, [r7, #28]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6e:	f002 f897 	bl	8008ca0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b72:	f3ef 8211 	mrs	r2, BASEPRI
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	61ba      	str	r2, [r7, #24]
 8006b88:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <xQueueGenericSendFromISR+0xbc>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d12c      	bne.n	8006bfa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb0:	f000 fa33 	bl	800701a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d112      	bne.n	8006be4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	3324      	adds	r3, #36	; 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 ffe8 	bl	8007ba0 <xTaskRemoveFromEventList>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e007      	b.n	8006bf4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006be4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006be8:	3301      	adds	r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	b25a      	sxtb	r2, r3
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006bf8:	e001      	b.n	8006bfe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3738      	adds	r7, #56	; 0x38
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08c      	sub	sp, #48	; 0x30
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <xQueueReceive+0x30>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	623b      	str	r3, [r7, #32]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <xQueueReceive+0x3e>
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <xQueueReceive+0x42>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <xQueueReceive+0x44>
 8006c56:	2300      	movs	r3, #0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xQueueReceive+0x5e>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61fb      	str	r3, [r7, #28]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c72:	f001 f965 	bl	8007f40 <xTaskGetSchedulerState>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <xQueueReceive+0x6e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <xQueueReceive+0x72>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <xQueueReceive+0x74>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueReceive+0x8e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	61bb      	str	r3, [r7, #24]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ca2:	f001 ff3b 	bl	8008b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb6:	f000 fa1a 	bl	80070ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00f      	beq.n	8006cea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	3310      	adds	r3, #16
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ff66 	bl	8007ba0 <xTaskRemoveFromEventList>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cda:	4b3d      	ldr	r3, [pc, #244]	; (8006dd0 <xQueueReceive+0x1bc>)
 8006cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cea:	f001 ff47 	bl	8008b7c <vPortExitCritical>
				return pdPASS;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e069      	b.n	8006dc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cf8:	f001 ff40 	bl	8008b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e062      	b.n	8006dc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d06:	f107 0310 	add.w	r3, r7, #16
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 ffac 	bl	8007c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d14:	f001 ff32 	bl	8008b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d18:	f000 fd1e 	bl	8007758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d1c:	f001 fefe 	bl	8008b1c <vPortEnterCritical>
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d26:	b25b      	sxtb	r3, r3
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d103      	bne.n	8006d36 <xQueueReceive+0x122>
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d3c:	b25b      	sxtb	r3, r3
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d103      	bne.n	8006d4c <xQueueReceive+0x138>
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d4c:	f001 ff16 	bl	8008b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d50:	1d3a      	adds	r2, r7, #4
 8006d52:	f107 0310 	add.w	r3, r7, #16
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 ff9b 	bl	8007c94 <xTaskCheckForTimeOut>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d123      	bne.n	8006dac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d66:	f000 fa3a 	bl	80071de <prvIsQueueEmpty>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d017      	beq.n	8006da0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fec1 	bl	8007b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d80:	f000 f9db 	bl	800713a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d84:	f000 fcf6 	bl	8007774 <xTaskResumeAll>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d189      	bne.n	8006ca2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xQueueReceive+0x1bc>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	e780      	b.n	8006ca2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da2:	f000 f9ca 	bl	800713a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006da6:	f000 fce5 	bl	8007774 <xTaskResumeAll>
 8006daa:	e77a      	b.n	8006ca2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dae:	f000 f9c4 	bl	800713a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006db2:	f000 fcdf 	bl	8007774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db8:	f000 fa11 	bl	80071de <prvIsQueueEmpty>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f43f af6f 	beq.w	8006ca2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3730      	adds	r7, #48	; 0x30
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08e      	sub	sp, #56	; 0x38
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	623b      	str	r3, [r7, #32]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fb      	str	r3, [r7, #28]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e24:	f001 f88c 	bl	8007f40 <xTaskGetSchedulerState>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <xQueueSemaphoreTake+0x60>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <xQueueSemaphoreTake+0x64>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <xQueueSemaphoreTake+0x66>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61bb      	str	r3, [r7, #24]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e54:	f001 fe62 	bl	8008b1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d024      	beq.n	8006eae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	1e5a      	subs	r2, r3, #1
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d104      	bne.n	8006e7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006e74:	f001 f9e4 	bl	8008240 <pvTaskIncrementMutexHeldCount>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00f      	beq.n	8006ea6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	3310      	adds	r3, #16
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fe88 	bl	8007ba0 <xTaskRemoveFromEventList>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e96:	4b54      	ldr	r3, [pc, #336]	; (8006fe8 <xQueueSemaphoreTake+0x214>)
 8006e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ea6:	f001 fe69 	bl	8008b7c <vPortExitCritical>
				return pdPASS;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e097      	b.n	8006fde <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d111      	bne.n	8006ed8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	617b      	str	r3, [r7, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ed0:	f001 fe54 	bl	8008b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e082      	b.n	8006fde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fec0 	bl	8007c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eec:	f001 fe46 	bl	8008b7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ef0:	f000 fc32 	bl	8007758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ef4:	f001 fe12 	bl	8008b1c <vPortEnterCritical>
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d103      	bne.n	8006f0e <xQueueSemaphoreTake+0x13a>
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f14:	b25b      	sxtb	r3, r3
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d103      	bne.n	8006f24 <xQueueSemaphoreTake+0x150>
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f24:	f001 fe2a 	bl	8008b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f28:	463a      	mov	r2, r7
 8006f2a:	f107 030c 	add.w	r3, r7, #12
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 feaf 	bl	8007c94 <xTaskCheckForTimeOut>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d132      	bne.n	8006fa2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f3e:	f000 f94e 	bl	80071de <prvIsQueueEmpty>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d026      	beq.n	8006f96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f50:	f001 fde4 	bl	8008b1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 f80f 	bl	8007f7c <xTaskPriorityInherit>
 8006f5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f60:	f001 fe0c 	bl	8008b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	3324      	adds	r3, #36	; 0x24
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fdc7 	bl	8007b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f74:	f000 f8e1 	bl	800713a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f78:	f000 fbfc 	bl	8007774 <xTaskResumeAll>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f47f af68 	bne.w	8006e54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <xQueueSemaphoreTake+0x214>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	e75e      	b.n	8006e54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f98:	f000 f8cf 	bl	800713a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f9c:	f000 fbea 	bl	8007774 <xTaskResumeAll>
 8006fa0:	e758      	b.n	8006e54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fa4:	f000 f8c9 	bl	800713a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fa8:	f000 fbe4 	bl	8007774 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fae:	f000 f916 	bl	80071de <prvIsQueueEmpty>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f43f af4d 	beq.w	8006e54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00d      	beq.n	8006fdc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006fc0:	f001 fdac 	bl	8008b1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc6:	f000 f811 	bl	8006fec <prvGetDisinheritPriorityAfterTimeout>
 8006fca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f001 f8ae 	bl	8008134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fd8:	f001 fdd0 	bl	8008b7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3738      	adds	r7, #56	; 0x38
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	e001      	b.n	800700e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800700e:	68fb      	ldr	r3, [r7, #12]
	}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10d      	bne.n	8007054 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d14d      	bne.n	80070dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	f001 f807 	bl	8008058 <xTaskPriorityDisinherit>
 800704a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	e043      	b.n	80070dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d119      	bne.n	800708e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6898      	ldr	r0, [r3, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	461a      	mov	r2, r3
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	f002 f85b 	bl	8009120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	441a      	add	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d32b      	bcc.n	80070dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	e026      	b.n	80070dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68d8      	ldr	r0, [r3, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	461a      	mov	r2, r3
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	f002 f841 	bl	8009120 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	425b      	negs	r3, r3
 80070a8:	441a      	add	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d207      	bcs.n	80070ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	425b      	negs	r3, r3
 80070c4:	441a      	add	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d105      	bne.n	80070dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	3b01      	subs	r3, #1
 80070da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070e4:	697b      	ldr	r3, [r7, #20]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d018      	beq.n	8007132 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d303      	bcc.n	8007122 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68d9      	ldr	r1, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	461a      	mov	r2, r3
 800712c:	6838      	ldr	r0, [r7, #0]
 800712e:	f001 fff7 	bl	8009120 <memcpy>
	}
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007142:	f001 fceb 	bl	8008b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800714c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800714e:	e011      	b.n	8007174 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3324      	adds	r3, #36	; 0x24
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fd1f 	bl	8007ba0 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007168:	f000 fdf6 	bl	8007d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	3b01      	subs	r3, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	dce9      	bgt.n	8007150 <prvUnlockQueue+0x16>
 800717c:	e000      	b.n	8007180 <prvUnlockQueue+0x46>
					break;
 800717e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	22ff      	movs	r2, #255	; 0xff
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007188:	f001 fcf8 	bl	8008b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800718c:	f001 fcc6 	bl	8008b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007196:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007198:	e011      	b.n	80071be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3310      	adds	r3, #16
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fcfa 	bl	8007ba0 <xTaskRemoveFromEventList>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071b2:	f000 fdd1 	bl	8007d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dce9      	bgt.n	800719a <prvUnlockQueue+0x60>
 80071c6:	e000      	b.n	80071ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071d2:	f001 fcd3 	bl	8008b7c <vPortExitCritical>
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071e6:	f001 fc99 	bl	8008b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071f2:	2301      	movs	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e001      	b.n	80071fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071fc:	f001 fcbe 	bl	8008b7c <vPortExitCritical>

	return xReturn;
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007212:	f001 fc83 	bl	8008b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721e:	429a      	cmp	r2, r3
 8007220:	d102      	bne.n	8007228 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e001      	b.n	800722c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800722c:	f001 fca6 	bl	8008b7c <vPortExitCritical>

	return xReturn;
 8007230:	68fb      	ldr	r3, [r7, #12]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e014      	b.n	8007276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800724c:	4a0e      	ldr	r2, [pc, #56]	; (8007288 <vQueueAddToRegistry+0x4c>)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10b      	bne.n	8007270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007258:	490b      	ldr	r1, [pc, #44]	; (8007288 <vQueueAddToRegistry+0x4c>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <vQueueAddToRegistry+0x4c>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4413      	add	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800726e:	e006      	b.n	800727e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3301      	adds	r3, #1
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b07      	cmp	r3, #7
 800727a:	d9e7      	bls.n	800724c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr
 8007288:	20000988 	.word	0x20000988

0800728c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800729c:	f001 fc3e 	bl	8008b1c <vPortEnterCritical>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a6:	b25b      	sxtb	r3, r3
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d103      	bne.n	80072b6 <vQueueWaitForMessageRestricted+0x2a>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072bc:	b25b      	sxtb	r3, r3
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	d103      	bne.n	80072cc <vQueueWaitForMessageRestricted+0x40>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072cc:	f001 fc56 	bl	8008b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3324      	adds	r3, #36	; 0x24
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fc31 	bl	8007b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	f7ff ff27 	bl	800713a <prvUnlockQueue>
	}
 80072ec:	bf00      	nop
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08e      	sub	sp, #56	; 0x38
 80072f8:	af04      	add	r7, sp, #16
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	623b      	str	r3, [r7, #32]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <xTaskCreateStatic+0x46>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61fb      	str	r3, [r7, #28]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800733a:	235c      	movs	r3, #92	; 0x5c
 800733c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b5c      	cmp	r3, #92	; 0x5c
 8007342:	d00a      	beq.n	800735a <xTaskCreateStatic+0x66>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	61bb      	str	r3, [r7, #24]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01e      	beq.n	800739e <xTaskCreateStatic+0xaa>
 8007360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01b      	beq.n	800739e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800736e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	2202      	movs	r2, #2
 8007374:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007378:	2300      	movs	r3, #0
 800737a:	9303      	str	r3, [sp, #12]
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	f107 0314 	add.w	r3, r7, #20
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f850 	bl	8007436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007398:	f000 f8d4 	bl	8007544 <prvAddNewTaskToReadyList>
 800739c:	e001      	b.n	80073a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073a2:	697b      	ldr	r3, [r7, #20]
	}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3728      	adds	r7, #40	; 0x28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	; 0x30
 80073b0:	af04      	add	r7, sp, #16
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fcab 	bl	8008d1c <pvPortMalloc>
 80073c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00e      	beq.n	80073ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073ce:	205c      	movs	r0, #92	; 0x5c
 80073d0:	f001 fca4 	bl	8008d1c <pvPortMalloc>
 80073d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
 80073e2:	e005      	b.n	80073f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073e4:	6978      	ldr	r0, [r7, #20]
 80073e6:	f001 fd5d 	bl	8008ea4 <vPortFree>
 80073ea:	e001      	b.n	80073f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d017      	beq.n	8007426 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073fe:	88fa      	ldrh	r2, [r7, #6]
 8007400:	2300      	movs	r3, #0
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f80e 	bl	8007436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800741a:	69f8      	ldr	r0, [r7, #28]
 800741c:	f000 f892 	bl	8007544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	e002      	b.n	800742c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007426:	f04f 33ff 	mov.w	r3, #4294967295
 800742a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800742c:	69bb      	ldr	r3, [r7, #24]
	}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b088      	sub	sp, #32
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	461a      	mov	r2, r3
 800744e:	21a5      	movs	r1, #165	; 0xa5
 8007450:	f001 fe74 	bl	800913c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800745e:	3b01      	subs	r3, #1
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f023 0307 	bic.w	r3, r3, #7
 800746c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <prvInitialiseNewTask+0x58>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	617b      	str	r3, [r7, #20]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800748e:	2300      	movs	r3, #0
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	e012      	b.n	80074ba <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	7819      	ldrb	r1, [r3, #0]
 800749c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	3334      	adds	r3, #52	; 0x34
 80074a4:	460a      	mov	r2, r1
 80074a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d006      	beq.n	80074c2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b0f      	cmp	r3, #15
 80074be:	d9e9      	bls.n	8007494 <prvInitialiseNewTask+0x5e>
 80074c0:	e000      	b.n	80074c4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80074c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b37      	cmp	r3, #55	; 0x37
 80074d0:	d901      	bls.n	80074d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074d2:	2337      	movs	r3, #55	; 0x37
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	2200      	movs	r2, #0
 80074e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3304      	adds	r3, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe ff72 	bl	80063d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	3318      	adds	r3, #24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe ff6d 	bl	80063d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007500:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007510:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2200      	movs	r2, #0
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	69b8      	ldr	r0, [r7, #24]
 8007526:	f001 fa05 	bl	8008934 <pxPortInitialiseStack>
 800752a:	4602      	mov	r2, r0
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800753c:	bf00      	nop
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800754c:	f001 fae6 	bl	8008b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007550:	4b2d      	ldr	r3, [pc, #180]	; (8007608 <prvAddNewTaskToReadyList+0xc4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	4a2c      	ldr	r2, [pc, #176]	; (8007608 <prvAddNewTaskToReadyList+0xc4>)
 8007558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800755a:	4b2c      	ldr	r3, [pc, #176]	; (800760c <prvAddNewTaskToReadyList+0xc8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007562:	4a2a      	ldr	r2, [pc, #168]	; (800760c <prvAddNewTaskToReadyList+0xc8>)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007568:	4b27      	ldr	r3, [pc, #156]	; (8007608 <prvAddNewTaskToReadyList+0xc4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d110      	bne.n	8007592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007570:	f000 fc16 	bl	8007da0 <prvInitialiseTaskLists>
 8007574:	e00d      	b.n	8007592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007576:	4b26      	ldr	r3, [pc, #152]	; (8007610 <prvAddNewTaskToReadyList+0xcc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800757e:	4b23      	ldr	r3, [pc, #140]	; (800760c <prvAddNewTaskToReadyList+0xc8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	429a      	cmp	r2, r3
 800758a:	d802      	bhi.n	8007592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800758c:	4a1f      	ldr	r2, [pc, #124]	; (800760c <prvAddNewTaskToReadyList+0xc8>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007592:	4b20      	ldr	r3, [pc, #128]	; (8007614 <prvAddNewTaskToReadyList+0xd0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <prvAddNewTaskToReadyList+0xd0>)
 800759a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <prvAddNewTaskToReadyList+0xd0>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <prvAddNewTaskToReadyList+0xd4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d903      	bls.n	80075b8 <prvAddNewTaskToReadyList+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <prvAddNewTaskToReadyList+0xd4>)
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4a15      	ldr	r2, [pc, #84]	; (800761c <prvAddNewTaskToReadyList+0xd8>)
 80075c6:	441a      	add	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7fe ff0d 	bl	80063ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075d4:	f001 fad2 	bl	8008b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <prvAddNewTaskToReadyList+0xcc>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00e      	beq.n	80075fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <prvAddNewTaskToReadyList+0xc8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d207      	bcs.n	80075fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075ee:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <prvAddNewTaskToReadyList+0xdc>)
 80075f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000e9c 	.word	0x20000e9c
 800760c:	200009c8 	.word	0x200009c8
 8007610:	20000ea8 	.word	0x20000ea8
 8007614:	20000eb8 	.word	0x20000eb8
 8007618:	20000ea4 	.word	0x20000ea4
 800761c:	200009cc 	.word	0x200009cc
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d017      	beq.n	8007666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <vTaskDelay+0x60>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <vTaskDelay+0x30>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60bb      	str	r3, [r7, #8]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007654:	f000 f880 	bl	8007758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007658:	2100      	movs	r1, #0
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fe04 	bl	8008268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007660:	f000 f888 	bl	8007774 <xTaskResumeAll>
 8007664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d107      	bne.n	800767c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <vTaskDelay+0x64>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800767c:	bf00      	nop
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000ec4 	.word	0x20000ec4
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800769a:	463a      	mov	r2, r7
 800769c:	1d39      	adds	r1, r7, #4
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fe46 	bl	8006334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	9202      	str	r2, [sp, #8]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	2300      	movs	r3, #0
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	460a      	mov	r2, r1
 80076ba:	4921      	ldr	r1, [pc, #132]	; (8007740 <vTaskStartScheduler+0xb4>)
 80076bc:	4821      	ldr	r0, [pc, #132]	; (8007744 <vTaskStartScheduler+0xb8>)
 80076be:	f7ff fe19 	bl	80072f4 <xTaskCreateStatic>
 80076c2:	4603      	mov	r3, r0
 80076c4:	4a20      	ldr	r2, [pc, #128]	; (8007748 <vTaskStartScheduler+0xbc>)
 80076c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076c8:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <vTaskStartScheduler+0xbc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076d0:	2301      	movs	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	e001      	b.n	80076da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d102      	bne.n	80076e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076e0:	f000 fe16 	bl	8008310 <xTimerCreateTimerTask>
 80076e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d116      	bne.n	800771a <vTaskStartScheduler+0x8e>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	613b      	str	r3, [r7, #16]
}
 80076fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007700:	4b12      	ldr	r3, [pc, #72]	; (800774c <vTaskStartScheduler+0xc0>)
 8007702:	f04f 32ff 	mov.w	r2, #4294967295
 8007706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <vTaskStartScheduler+0xc4>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <vTaskStartScheduler+0xc8>)
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007714:	f001 f990 	bl	8008a38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007718:	e00e      	b.n	8007738 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d10a      	bne.n	8007738 <vTaskStartScheduler+0xac>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60fb      	str	r3, [r7, #12]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <vTaskStartScheduler+0xaa>
}
 8007738:	bf00      	nop
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	08009ac0 	.word	0x08009ac0
 8007744:	08007d71 	.word	0x08007d71
 8007748:	20000ec0 	.word	0x20000ec0
 800774c:	20000ebc 	.word	0x20000ebc
 8007750:	20000ea8 	.word	0x20000ea8
 8007754:	20000ea0 	.word	0x20000ea0

08007758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <vTaskSuspendAll+0x18>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a03      	ldr	r2, [pc, #12]	; (8007770 <vTaskSuspendAll+0x18>)
 8007764:	6013      	str	r3, [r2, #0]
}
 8007766:	bf00      	nop
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000ec4 	.word	0x20000ec4

08007774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007782:	4b42      	ldr	r3, [pc, #264]	; (800788c <xTaskResumeAll+0x118>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077a0:	f001 f9bc 	bl	8008b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077a4:	4b39      	ldr	r3, [pc, #228]	; (800788c <xTaskResumeAll+0x118>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	4a38      	ldr	r2, [pc, #224]	; (800788c <xTaskResumeAll+0x118>)
 80077ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ae:	4b37      	ldr	r3, [pc, #220]	; (800788c <xTaskResumeAll+0x118>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d162      	bne.n	800787c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077b6:	4b36      	ldr	r3, [pc, #216]	; (8007890 <xTaskResumeAll+0x11c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d05e      	beq.n	800787c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077be:	e02f      	b.n	8007820 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077c0:	4b34      	ldr	r3, [pc, #208]	; (8007894 <xTaskResumeAll+0x120>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3318      	adds	r3, #24
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fe69 	bl	80064a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fe64 	bl	80064a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e0:	4b2d      	ldr	r3, [pc, #180]	; (8007898 <xTaskResumeAll+0x124>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d903      	bls.n	80077f0 <xTaskResumeAll+0x7c>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	4a2a      	ldr	r2, [pc, #168]	; (8007898 <xTaskResumeAll+0x124>)
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4a27      	ldr	r2, [pc, #156]	; (800789c <xTaskResumeAll+0x128>)
 80077fe:	441a      	add	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fe fdf1 	bl	80063ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <xTaskResumeAll+0x12c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	429a      	cmp	r2, r3
 8007818:	d302      	bcc.n	8007820 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800781a:	4b22      	ldr	r3, [pc, #136]	; (80078a4 <xTaskResumeAll+0x130>)
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007820:	4b1c      	ldr	r3, [pc, #112]	; (8007894 <xTaskResumeAll+0x120>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1cb      	bne.n	80077c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800782e:	f000 fb55 	bl	8007edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007832:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <xTaskResumeAll+0x134>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d010      	beq.n	8007860 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800783e:	f000 f845 	bl	80078cc <xTaskIncrementTick>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007848:	4b16      	ldr	r3, [pc, #88]	; (80078a4 <xTaskResumeAll+0x130>)
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3b01      	subs	r3, #1
 8007852:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f1      	bne.n	800783e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <xTaskResumeAll+0x134>)
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007860:	4b10      	ldr	r3, [pc, #64]	; (80078a4 <xTaskResumeAll+0x130>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <xTaskResumeAll+0x138>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800787c:	f001 f97e 	bl	8008b7c <vPortExitCritical>

	return xAlreadyYielded;
 8007880:	68bb      	ldr	r3, [r7, #8]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000ec4 	.word	0x20000ec4
 8007890:	20000e9c 	.word	0x20000e9c
 8007894:	20000e5c 	.word	0x20000e5c
 8007898:	20000ea4 	.word	0x20000ea4
 800789c:	200009cc 	.word	0x200009cc
 80078a0:	200009c8 	.word	0x200009c8
 80078a4:	20000eb0 	.word	0x20000eb0
 80078a8:	20000eac 	.word	0x20000eac
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078b6:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <xTaskGetTickCount+0x18>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078bc:	687b      	ldr	r3, [r7, #4]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr
 80078c8:	20000ea0 	.word	0x20000ea0

080078cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d6:	4b51      	ldr	r3, [pc, #324]	; (8007a1c <xTaskIncrementTick+0x150>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 808e 	bne.w	80079fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e0:	4b4f      	ldr	r3, [pc, #316]	; (8007a20 <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078e8:	4a4d      	ldr	r2, [pc, #308]	; (8007a20 <xTaskIncrementTick+0x154>)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d120      	bne.n	8007936 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f4:	4b4b      	ldr	r3, [pc, #300]	; (8007a24 <xTaskIncrementTick+0x158>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <xTaskIncrementTick+0x48>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	603b      	str	r3, [r7, #0]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xTaskIncrementTick+0x46>
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	4b43      	ldr	r3, [pc, #268]	; (8007a28 <xTaskIncrementTick+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a41      	ldr	r2, [pc, #260]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	4a41      	ldr	r2, [pc, #260]	; (8007a28 <xTaskIncrementTick+0x15c>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4b40      	ldr	r3, [pc, #256]	; (8007a2c <xTaskIncrementTick+0x160>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3301      	adds	r3, #1
 800792e:	4a3f      	ldr	r2, [pc, #252]	; (8007a2c <xTaskIncrementTick+0x160>)
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	f000 fad3 	bl	8007edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007936:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xTaskIncrementTick+0x164>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d34e      	bcc.n	80079de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007940:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <xTaskIncrementTick+0x82>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xTaskIncrementTick+0x84>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <xTaskIncrementTick+0x164>)
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	601a      	str	r2, [r3, #0]
					break;
 800795c:	e03f      	b.n	80079de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d203      	bcs.n	800797e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007976:	4a2e      	ldr	r2, [pc, #184]	; (8007a30 <xTaskIncrementTick+0x164>)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6013      	str	r3, [r2, #0]
						break;
 800797c:	e02f      	b.n	80079de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fd8e 	bl	80064a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	d004      	beq.n	800799a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3318      	adds	r3, #24
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe fd85 	bl	80064a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799e:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <xTaskIncrementTick+0x168>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d903      	bls.n	80079ae <xTaskIncrementTick+0xe2>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <xTaskIncrementTick+0x168>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <xTaskIncrementTick+0x16c>)
 80079bc:	441a      	add	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fe fd12 	bl	80063ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ce:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <xTaskIncrementTick+0x170>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3b3      	bcc.n	8007940 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079dc:	e7b0      	b.n	8007940 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079de:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <xTaskIncrementTick+0x170>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	4914      	ldr	r1, [pc, #80]	; (8007a38 <xTaskIncrementTick+0x16c>)
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d907      	bls.n	8007a06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e004      	b.n	8007a06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <xTaskIncrementTick+0x174>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	4a0f      	ldr	r2, [pc, #60]	; (8007a40 <xTaskIncrementTick+0x174>)
 8007a04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskIncrementTick+0x178>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a12:	697b      	ldr	r3, [r7, #20]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000ec4 	.word	0x20000ec4
 8007a20:	20000ea0 	.word	0x20000ea0
 8007a24:	20000e54 	.word	0x20000e54
 8007a28:	20000e58 	.word	0x20000e58
 8007a2c:	20000eb4 	.word	0x20000eb4
 8007a30:	20000ebc 	.word	0x20000ebc
 8007a34:	20000ea4 	.word	0x20000ea4
 8007a38:	200009cc 	.word	0x200009cc
 8007a3c:	200009c8 	.word	0x200009c8
 8007a40:	20000eac 	.word	0x20000eac
 8007a44:	20000eb0 	.word	0x20000eb0

08007a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a4e:	4b27      	ldr	r3, [pc, #156]	; (8007aec <vTaskSwitchContext+0xa4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a56:	4b26      	ldr	r3, [pc, #152]	; (8007af0 <vTaskSwitchContext+0xa8>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a5c:	e041      	b.n	8007ae2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a5e:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <vTaskSwitchContext+0xa8>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a64:	4b23      	ldr	r3, [pc, #140]	; (8007af4 <vTaskSwitchContext+0xac>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	e010      	b.n	8007a8e <vTaskSwitchContext+0x46>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	607b      	str	r3, [r7, #4]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <vTaskSwitchContext+0x3e>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	491a      	ldr	r1, [pc, #104]	; (8007af8 <vTaskSwitchContext+0xb0>)
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0e4      	beq.n	8007a6c <vTaskSwitchContext+0x24>
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4a12      	ldr	r2, [pc, #72]	; (8007af8 <vTaskSwitchContext+0xb0>)
 8007aae:	4413      	add	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d104      	bne.n	8007ad2 <vTaskSwitchContext+0x8a>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a08      	ldr	r2, [pc, #32]	; (8007afc <vTaskSwitchContext+0xb4>)
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	4a05      	ldr	r2, [pc, #20]	; (8007af4 <vTaskSwitchContext+0xac>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6013      	str	r3, [r2, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr
 8007aec:	20000ec4 	.word	0x20000ec4
 8007af0:	20000eb0 	.word	0x20000eb0
 8007af4:	20000ea4 	.word	0x20000ea4
 8007af8:	200009cc 	.word	0x200009cc
 8007afc:	200009c8 	.word	0x200009c8

08007b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <vTaskPlaceOnEventList+0x44>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fe fc80 	bl	8006434 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b34:	2101      	movs	r1, #1
 8007b36:	6838      	ldr	r0, [r7, #0]
 8007b38:	f000 fb96 	bl	8008268 <prvAddCurrentTaskToDelayedList>
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	200009c8 	.word	0x200009c8

08007b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	617b      	str	r3, [r7, #20]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <vTaskPlaceOnEventListRestricted+0x54>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3318      	adds	r3, #24
 8007b76:	4619      	mov	r1, r3
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7fe fc38 	bl	80063ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b84:	f04f 33ff 	mov.w	r3, #4294967295
 8007b88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	68b8      	ldr	r0, [r7, #8]
 8007b8e:	f000 fb6b 	bl	8008268 <prvAddCurrentTaskToDelayedList>
	}
 8007b92:	bf00      	nop
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200009c8 	.word	0x200009c8

08007ba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60fb      	str	r3, [r7, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	3318      	adds	r3, #24
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe fc67 	bl	80064a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <xTaskRemoveFromEventList+0xb0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d11d      	bne.n	8007c1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fc5e 	bl	80064a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bec:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <xTaskRemoveFromEventList+0xb4>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d903      	bls.n	8007bfc <xTaskRemoveFromEventList+0x5c>
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <xTaskRemoveFromEventList+0xb4>)
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4a13      	ldr	r2, [pc, #76]	; (8007c58 <xTaskRemoveFromEventList+0xb8>)
 8007c0a:	441a      	add	r2, r3
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7fe fbeb 	bl	80063ee <vListInsertEnd>
 8007c18:	e005      	b.n	8007c26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	3318      	adds	r3, #24
 8007c1e:	4619      	mov	r1, r3
 8007c20:	480e      	ldr	r0, [pc, #56]	; (8007c5c <xTaskRemoveFromEventList+0xbc>)
 8007c22:	f7fe fbe4 	bl	80063ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <xTaskRemoveFromEventList+0xc0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d905      	bls.n	8007c40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <xTaskRemoveFromEventList+0xc4>)
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e001      	b.n	8007c44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c44:	697b      	ldr	r3, [r7, #20]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000ec4 	.word	0x20000ec4
 8007c54:	20000ea4 	.word	0x20000ea4
 8007c58:	200009cc 	.word	0x200009cc
 8007c5c:	20000e5c 	.word	0x20000e5c
 8007c60:	200009c8 	.word	0x200009c8
 8007c64:	20000eb0 	.word	0x20000eb0

08007c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <vTaskInternalSetTimeOutState+0x24>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <vTaskInternalSetTimeOutState+0x28>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	605a      	str	r2, [r3, #4]
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000eb4 	.word	0x20000eb4
 8007c90:	20000ea0 	.word	0x20000ea0

08007c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	613b      	str	r3, [r7, #16]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	60fb      	str	r3, [r7, #12]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cd6:	f000 ff21 	bl	8008b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cda:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <xTaskCheckForTimeOut+0xbc>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d102      	bne.n	8007cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	e023      	b.n	8007d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	4b15      	ldr	r3, [pc, #84]	; (8007d54 <xTaskCheckForTimeOut+0xc0>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d007      	beq.n	8007d16 <xTaskCheckForTimeOut+0x82>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d302      	bcc.n	8007d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	61fb      	str	r3, [r7, #28]
 8007d14:	e015      	b.n	8007d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d20b      	bcs.n	8007d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff ff9b 	bl	8007c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	e004      	b.n	8007d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d42:	f000 ff1b 	bl	8008b7c <vPortExitCritical>

	return xReturn;
 8007d46:	69fb      	ldr	r3, [r7, #28]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3720      	adds	r7, #32
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000ea0 	.word	0x20000ea0
 8007d54:	20000eb4 	.word	0x20000eb4

08007d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d5c:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <vTaskMissedYield+0x14>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	601a      	str	r2, [r3, #0]
}
 8007d62:	bf00      	nop
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000eb0 	.word	0x20000eb0

08007d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d78:	f000 f852 	bl	8007e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <prvIdleTask+0x28>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d9f9      	bls.n	8007d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <prvIdleTask+0x2c>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d94:	e7f0      	b.n	8007d78 <prvIdleTask+0x8>
 8007d96:	bf00      	nop
 8007d98:	200009cc 	.word	0x200009cc
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	e00c      	b.n	8007dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4a12      	ldr	r2, [pc, #72]	; (8007e00 <prvInitialiseTaskLists+0x60>)
 8007db8:	4413      	add	r3, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe faec 	bl	8006398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	607b      	str	r3, [r7, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b37      	cmp	r3, #55	; 0x37
 8007dca:	d9ef      	bls.n	8007dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dcc:	480d      	ldr	r0, [pc, #52]	; (8007e04 <prvInitialiseTaskLists+0x64>)
 8007dce:	f7fe fae3 	bl	8006398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dd2:	480d      	ldr	r0, [pc, #52]	; (8007e08 <prvInitialiseTaskLists+0x68>)
 8007dd4:	f7fe fae0 	bl	8006398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dd8:	480c      	ldr	r0, [pc, #48]	; (8007e0c <prvInitialiseTaskLists+0x6c>)
 8007dda:	f7fe fadd 	bl	8006398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dde:	480c      	ldr	r0, [pc, #48]	; (8007e10 <prvInitialiseTaskLists+0x70>)
 8007de0:	f7fe fada 	bl	8006398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007de4:	480b      	ldr	r0, [pc, #44]	; (8007e14 <prvInitialiseTaskLists+0x74>)
 8007de6:	f7fe fad7 	bl	8006398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dea:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <prvInitialiseTaskLists+0x78>)
 8007dec:	4a05      	ldr	r2, [pc, #20]	; (8007e04 <prvInitialiseTaskLists+0x64>)
 8007dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <prvInitialiseTaskLists+0x7c>)
 8007df2:	4a05      	ldr	r2, [pc, #20]	; (8007e08 <prvInitialiseTaskLists+0x68>)
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	200009cc 	.word	0x200009cc
 8007e04:	20000e2c 	.word	0x20000e2c
 8007e08:	20000e40 	.word	0x20000e40
 8007e0c:	20000e5c 	.word	0x20000e5c
 8007e10:	20000e70 	.word	0x20000e70
 8007e14:	20000e88 	.word	0x20000e88
 8007e18:	20000e54 	.word	0x20000e54
 8007e1c:	20000e58 	.word	0x20000e58

08007e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e26:	e019      	b.n	8007e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e28:	f000 fe78 	bl	8008b1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e2c:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <prvCheckTasksWaitingTermination+0x50>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fb33 	bl	80064a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <prvCheckTasksWaitingTermination+0x54>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	4a0b      	ldr	r2, [pc, #44]	; (8007e74 <prvCheckTasksWaitingTermination+0x54>)
 8007e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e48:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <prvCheckTasksWaitingTermination+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	4a0a      	ldr	r2, [pc, #40]	; (8007e78 <prvCheckTasksWaitingTermination+0x58>)
 8007e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e52:	f000 fe93 	bl	8008b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f810 	bl	8007e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <prvCheckTasksWaitingTermination+0x58>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e1      	bne.n	8007e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000e70 	.word	0x20000e70
 8007e74:	20000e9c 	.word	0x20000e9c
 8007e78:	20000e84 	.word	0x20000e84

08007e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d108      	bne.n	8007ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 f806 	bl	8008ea4 <vPortFree>
				vPortFree( pxTCB );
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f803 	bl	8008ea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e9e:	e018      	b.n	8007ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d103      	bne.n	8007eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fffa 	bl	8008ea4 <vPortFree>
	}
 8007eb0:	e00f      	b.n	8007ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d00a      	beq.n	8007ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60fb      	str	r3, [r7, #12]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <prvDeleteTCB+0x54>
	}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <prvResetNextTaskUnblockTime+0x40>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <prvResetNextTaskUnblockTime+0x14>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <prvResetNextTaskUnblockTime+0x16>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <prvResetNextTaskUnblockTime+0x44>)
 8007ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8007efc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007efe:	e008      	b.n	8007f12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f00:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <prvResetNextTaskUnblockTime+0x40>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	4a04      	ldr	r2, [pc, #16]	; (8007f20 <prvResetNextTaskUnblockTime+0x44>)
 8007f10:	6013      	str	r3, [r2, #0]
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	20000e54 	.word	0x20000e54
 8007f20:	20000ebc 	.word	0x20000ebc

08007f24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f2a:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <xTaskGetCurrentTaskHandle+0x18>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007f30:	687b      	ldr	r3, [r7, #4]
	}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	200009c8 	.word	0x200009c8

08007f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f46:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <xTaskGetSchedulerState+0x34>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	e008      	b.n	8007f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f54:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <xTaskGetSchedulerState+0x38>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	607b      	str	r3, [r7, #4]
 8007f60:	e001      	b.n	8007f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f66:	687b      	ldr	r3, [r7, #4]
	}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000ea8 	.word	0x20000ea8
 8007f78:	20000ec4 	.word	0x20000ec4

08007f7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d056      	beq.n	8008040 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f96:	4b2d      	ldr	r3, [pc, #180]	; (800804c <xTaskPriorityInherit+0xd0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d246      	bcs.n	800802e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	db06      	blt.n	8007fb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa8:	4b28      	ldr	r3, [pc, #160]	; (800804c <xTaskPriorityInherit+0xd0>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6959      	ldr	r1, [r3, #20]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4a22      	ldr	r2, [pc, #136]	; (8008050 <xTaskPriorityInherit+0xd4>)
 8007fc8:	4413      	add	r3, r2
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	d101      	bne.n	8007fd2 <xTaskPriorityInherit+0x56>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <xTaskPriorityInherit+0x58>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d022      	beq.n	800801e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fa61 	bl	80064a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <xTaskPriorityInherit+0xd0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4b18      	ldr	r3, [pc, #96]	; (8008054 <xTaskPriorityInherit+0xd8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <xTaskPriorityInherit+0x84>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <xTaskPriorityInherit+0xd8>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a10      	ldr	r2, [pc, #64]	; (8008050 <xTaskPriorityInherit+0xd4>)
 800800e:	441a      	add	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe f9e9 	bl	80063ee <vListInsertEnd>
 800801c:	e004      	b.n	8008028 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800801e:	4b0b      	ldr	r3, [pc, #44]	; (800804c <xTaskPriorityInherit+0xd0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	e008      	b.n	8008040 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <xTaskPriorityInherit+0xd0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	429a      	cmp	r2, r3
 800803a:	d201      	bcs.n	8008040 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008040:	68fb      	ldr	r3, [r7, #12]
	}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200009c8 	.word	0x200009c8
 8008050:	200009cc 	.word	0x200009cc
 8008054:	20000ea4 	.word	0x20000ea4

08008058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d056      	beq.n	800811c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800806e:	4b2e      	ldr	r3, [pc, #184]	; (8008128 <xTaskPriorityDisinherit+0xd0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	429a      	cmp	r2, r3
 8008076:	d00a      	beq.n	800808e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60bb      	str	r3, [r7, #8]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b0:	1e5a      	subs	r2, r3, #1
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080be:	429a      	cmp	r2, r3
 80080c0:	d02c      	beq.n	800811c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d128      	bne.n	800811c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f9e8 	bl	80064a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	4b0f      	ldr	r3, [pc, #60]	; (800812c <xTaskPriorityDisinherit+0xd4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d903      	bls.n	80080fc <xTaskPriorityDisinherit+0xa4>
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	4a0c      	ldr	r2, [pc, #48]	; (800812c <xTaskPriorityDisinherit+0xd4>)
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4a09      	ldr	r2, [pc, #36]	; (8008130 <xTaskPriorityDisinherit+0xd8>)
 800810a:	441a      	add	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3304      	adds	r3, #4
 8008110:	4619      	mov	r1, r3
 8008112:	4610      	mov	r0, r2
 8008114:	f7fe f96b 	bl	80063ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800811c:	697b      	ldr	r3, [r7, #20]
	}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200009c8 	.word	0x200009c8
 800812c:	20000ea4 	.word	0x20000ea4
 8008130:	200009cc 	.word	0x200009cc

08008134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008142:	2301      	movs	r3, #1
 8008144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d06f      	beq.n	800822c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	60fb      	str	r3, [r7, #12]
}
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d902      	bls.n	800817a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e002      	b.n	8008180 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	429a      	cmp	r2, r3
 8008188:	d050      	beq.n	800822c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	429a      	cmp	r2, r3
 8008192:	d14b      	bne.n	800822c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008194:	4b27      	ldr	r3, [pc, #156]	; (8008234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	429a      	cmp	r2, r3
 800819c:	d10a      	bne.n	80081b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	60bb      	str	r3, [r7, #8]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	db04      	blt.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	6959      	ldr	r1, [r3, #20]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081e2:	4413      	add	r3, r2
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d101      	bne.n	80081ec <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <vTaskPriorityDisinheritAfterTimeout+0xba>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01c      	beq.n	800822c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe f954 	bl	80064a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008200:	4b0e      	ldr	r3, [pc, #56]	; (800823c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a0b      	ldr	r2, [pc, #44]	; (800823c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4a06      	ldr	r2, [pc, #24]	; (8008238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800821e:	441a      	add	r2, r3
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7fe f8e1 	bl	80063ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800822c:	bf00      	nop
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	200009c8 	.word	0x200009c8
 8008238:	200009cc 	.word	0x200009cc
 800823c:	20000ea4 	.word	0x20000ea4

08008240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <pvTaskIncrementMutexHeldCount+0x24>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <pvTaskIncrementMutexHeldCount+0x24>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008252:	3201      	adds	r2, #1
 8008254:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008256:	4b03      	ldr	r3, [pc, #12]	; (8008264 <pvTaskIncrementMutexHeldCount+0x24>)
 8008258:	681b      	ldr	r3, [r3, #0]
	}
 800825a:	4618      	mov	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	bc80      	pop	{r7}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	200009c8 	.word	0x200009c8

08008268 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008272:	4b21      	ldr	r3, [pc, #132]	; (80082f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008278:	4b20      	ldr	r3, [pc, #128]	; (80082fc <prvAddCurrentTaskToDelayedList+0x94>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3304      	adds	r3, #4
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe f910 	bl	80064a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d10a      	bne.n	80082a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008292:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4819      	ldr	r0, [pc, #100]	; (8008300 <prvAddCurrentTaskToDelayedList+0x98>)
 800829c:	f7fe f8a7 	bl	80063ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082a0:	e026      	b.n	80082f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4413      	add	r3, r2
 80082a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <prvAddCurrentTaskToDelayedList+0x94>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d209      	bcs.n	80082ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ba:	4b12      	ldr	r3, [pc, #72]	; (8008304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <prvAddCurrentTaskToDelayedList+0x94>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f7fe f8b4 	bl	8006434 <vListInsert>
}
 80082cc:	e010      	b.n	80082f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ce:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <prvAddCurrentTaskToDelayedList+0x94>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f7fe f8aa 	bl	8006434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e0:	4b0a      	ldr	r3, [pc, #40]	; (800830c <prvAddCurrentTaskToDelayedList+0xa4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d202      	bcs.n	80082f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ea:	4a08      	ldr	r2, [pc, #32]	; (800830c <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6013      	str	r3, [r2, #0]
}
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000ea0 	.word	0x20000ea0
 80082fc:	200009c8 	.word	0x200009c8
 8008300:	20000e88 	.word	0x20000e88
 8008304:	20000e58 	.word	0x20000e58
 8008308:	20000e54 	.word	0x20000e54
 800830c:	20000ebc 	.word	0x20000ebc

08008310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800831a:	f000 facb 	bl	80088b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800831e:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <xTimerCreateTimerTask+0x80>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d021      	beq.n	800836a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800832e:	1d3a      	adds	r2, r7, #4
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	f107 030c 	add.w	r3, r7, #12
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe f813 	bl	8006364 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	9202      	str	r2, [sp, #8]
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	2302      	movs	r3, #2
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	2300      	movs	r3, #0
 800834e:	460a      	mov	r2, r1
 8008350:	4910      	ldr	r1, [pc, #64]	; (8008394 <xTimerCreateTimerTask+0x84>)
 8008352:	4811      	ldr	r0, [pc, #68]	; (8008398 <xTimerCreateTimerTask+0x88>)
 8008354:	f7fe ffce 	bl	80072f4 <xTaskCreateStatic>
 8008358:	4603      	mov	r3, r0
 800835a:	4a10      	ldr	r2, [pc, #64]	; (800839c <xTimerCreateTimerTask+0x8c>)
 800835c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <xTimerCreateTimerTask+0x8c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008366:	2301      	movs	r3, #1
 8008368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	613b      	str	r3, [r7, #16]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008386:	697b      	ldr	r3, [r7, #20]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000ef8 	.word	0x20000ef8
 8008394:	08009ac8 	.word	0x08009ac8
 8008398:	080084bd 	.word	0x080084bd
 800839c:	20000efc 	.word	0x20000efc

080083a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08a      	sub	sp, #40	; 0x28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	623b      	str	r3, [r7, #32]
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ce:	4b1a      	ldr	r3, [pc, #104]	; (8008438 <xTimerGenericCommand+0x98>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d02a      	beq.n	800842c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b05      	cmp	r3, #5
 80083e6:	dc18      	bgt.n	800841a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083e8:	f7ff fdaa 	bl	8007f40 <xTaskGetSchedulerState>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d109      	bne.n	8008406 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <xTimerGenericCommand+0x98>)
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	f107 0110 	add.w	r1, r7, #16
 80083fa:	2300      	movs	r3, #0
 80083fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fe:	f7fe fa73 	bl	80068e8 <xQueueGenericSend>
 8008402:	6278      	str	r0, [r7, #36]	; 0x24
 8008404:	e012      	b.n	800842c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008406:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <xTimerGenericCommand+0x98>)
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f107 0110 	add.w	r1, r7, #16
 800840e:	2300      	movs	r3, #0
 8008410:	2200      	movs	r2, #0
 8008412:	f7fe fa69 	bl	80068e8 <xQueueGenericSend>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24
 8008418:	e008      	b.n	800842c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800841a:	4b07      	ldr	r3, [pc, #28]	; (8008438 <xTimerGenericCommand+0x98>)
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	f107 0110 	add.w	r1, r7, #16
 8008422:	2300      	movs	r3, #0
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	f7fe fb5d 	bl	8006ae4 <xQueueGenericSendFromISR>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800842e:	4618      	mov	r0, r3
 8008430:	3728      	adds	r7, #40	; 0x28
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000ef8 	.word	0x20000ef8

0800843c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008446:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <prvProcessExpiredTimer+0x7c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	3304      	adds	r3, #4
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe f825 	bl	80064a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d122      	bne.n	80084a8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	18d1      	adds	r1, r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	6978      	ldr	r0, [r7, #20]
 8008470:	f000 f8c8 	bl	8008604 <prvInsertTimerInActiveList>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d016      	beq.n	80084a8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	2100      	movs	r1, #0
 8008484:	6978      	ldr	r0, [r7, #20]
 8008486:	f7ff ff8b 	bl	80083a0 <xTimerGenericCommand>
 800848a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60fb      	str	r3, [r7, #12]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	6978      	ldr	r0, [r7, #20]
 80084ae:	4798      	blx	r3
}
 80084b0:	bf00      	nop
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000ef0 	.word	0x20000ef0

080084bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084c4:	f107 0308 	add.w	r3, r7, #8
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 f857 	bl	800857c <prvGetNextExpireTime>
 80084ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4619      	mov	r1, r3
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f803 	bl	80084e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084da:	f000 f8d5 	bl	8008688 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084de:	e7f1      	b.n	80084c4 <prvTimerTask+0x8>

080084e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084ea:	f7ff f935 	bl	8007758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ee:	f107 0308 	add.w	r3, r7, #8
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 f866 	bl	80085c4 <prvSampleTimeNow>
 80084f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d130      	bne.n	8008562 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <prvProcessTimerOrBlockTask+0x3c>
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	429a      	cmp	r2, r3
 800850c:	d806      	bhi.n	800851c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800850e:	f7ff f931 	bl	8007774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff ff91 	bl	800843c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800851a:	e024      	b.n	8008566 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d008      	beq.n	8008534 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008522:	4b13      	ldr	r3, [pc, #76]	; (8008570 <prvProcessTimerOrBlockTask+0x90>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf0c      	ite	eq
 800852c:	2301      	moveq	r3, #1
 800852e:	2300      	movne	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <prvProcessTimerOrBlockTask+0x94>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4619      	mov	r1, r3
 8008542:	f7fe fea3 	bl	800728c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008546:	f7ff f915 	bl	8007774 <xTaskResumeAll>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008550:	4b09      	ldr	r3, [pc, #36]	; (8008578 <prvProcessTimerOrBlockTask+0x98>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
}
 8008560:	e001      	b.n	8008566 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008562:	f7ff f907 	bl	8007774 <xTaskResumeAll>
}
 8008566:	bf00      	nop
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000ef4 	.word	0x20000ef4
 8008574:	20000ef8 	.word	0x20000ef8
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <prvGetNextExpireTime+0x44>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	bf0c      	ite	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	2300      	movne	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085a2:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <prvGetNextExpireTime+0x44>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e001      	b.n	80085b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20000ef0 	.word	0x20000ef0

080085c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085cc:	f7ff f970 	bl	80078b0 <xTaskGetTickCount>
 80085d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <prvSampleTimeNow+0x3c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d205      	bcs.n	80085e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085dc:	f000 f908 	bl	80087f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e002      	b.n	80085ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085ee:	4a04      	ldr	r2, [pc, #16]	; (8008600 <prvSampleTimeNow+0x3c>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000f00 	.word	0x20000f00

08008604 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d812      	bhi.n	8008650 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e01b      	b.n	8008676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800863e:	4b10      	ldr	r3, [pc, #64]	; (8008680 <prvInsertTimerInActiveList+0x7c>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fd fef3 	bl	8006434 <vListInsert>
 800864e:	e012      	b.n	8008676 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d206      	bcs.n	8008666 <prvInsertTimerInActiveList+0x62>
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d302      	bcc.n	8008666 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008660:	2301      	movs	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e007      	b.n	8008676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008666:	4b07      	ldr	r3, [pc, #28]	; (8008684 <prvInsertTimerInActiveList+0x80>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3304      	adds	r3, #4
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f7fd fedf 	bl	8006434 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008676:	697b      	ldr	r3, [r7, #20]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20000ef4 	.word	0x20000ef4
 8008684:	20000ef0 	.word	0x20000ef0

08008688 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08e      	sub	sp, #56	; 0x38
 800868c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800868e:	e09d      	b.n	80087cc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	da18      	bge.n	80086c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	3304      	adds	r3, #4
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	61fb      	str	r3, [r7, #28]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086be:	6850      	ldr	r0, [r2, #4]
 80086c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c2:	6892      	ldr	r2, [r2, #8]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	db7d      	blt.n	80087ca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd fee0 	bl	80064a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086e4:	463b      	mov	r3, r7
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff ff6c 	bl	80085c4 <prvSampleTimeNow>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b09      	cmp	r3, #9
 80086f2:	d86b      	bhi.n	80087cc <prvProcessReceivedCommands+0x144>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <prvProcessReceivedCommands+0x74>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008725 	.word	0x08008725
 8008700:	08008725 	.word	0x08008725
 8008704:	08008725 	.word	0x08008725
 8008708:	080087cd 	.word	0x080087cd
 800870c:	08008781 	.word	0x08008781
 8008710:	080087b9 	.word	0x080087b9
 8008714:	08008725 	.word	0x08008725
 8008718:	08008725 	.word	0x08008725
 800871c:	080087cd 	.word	0x080087cd
 8008720:	08008781 	.word	0x08008781
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	18d1      	adds	r1, r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008732:	f7ff ff67 	bl	8008604 <prvInsertTimerInActiveList>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d047      	beq.n	80087cc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008742:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d13f      	bne.n	80087cc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	441a      	add	r2, r3
 8008754:	2300      	movs	r3, #0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	2100      	movs	r1, #0
 800875c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875e:	f7ff fe1f 	bl	80083a0 <xTimerGenericCommand>
 8008762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d130      	bne.n	80087cc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	61bb      	str	r3, [r7, #24]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10a      	bne.n	80087a4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	617b      	str	r3, [r7, #20]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	18d1      	adds	r1, r2, r3
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b2:	f7ff ff27 	bl	8008604 <prvInsertTimerInActiveList>
					break;
 80087b6:	e009      	b.n	80087cc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d104      	bne.n	80087cc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80087c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c4:	f000 fb6e 	bl	8008ea4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087c8:	e000      	b.n	80087cc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087cc:	4b07      	ldr	r3, [pc, #28]	; (80087ec <prvProcessReceivedCommands+0x164>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	1d39      	adds	r1, r7, #4
 80087d2:	2200      	movs	r2, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fa1d 	bl	8006c14 <xQueueReceive>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f47f af57 	bne.w	8008690 <prvProcessReceivedCommands+0x8>
	}
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	3730      	adds	r7, #48	; 0x30
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000ef8 	.word	0x20000ef8

080087f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087f6:	e045      	b.n	8008884 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f8:	4b2c      	ldr	r3, [pc, #176]	; (80088ac <prvSwitchTimerLists+0xbc>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008802:	4b2a      	ldr	r3, [pc, #168]	; (80088ac <prvSwitchTimerLists+0xbc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3304      	adds	r3, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f7fd fe47 	bl	80064a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d12e      	bne.n	8008884 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4413      	add	r3, r2
 800882e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	429a      	cmp	r2, r3
 8008836:	d90e      	bls.n	8008856 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008844:	4b19      	ldr	r3, [pc, #100]	; (80088ac <prvSwitchTimerLists+0xbc>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f7fd fdf0 	bl	8006434 <vListInsert>
 8008854:	e016      	b.n	8008884 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008856:	2300      	movs	r3, #0
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	2100      	movs	r1, #0
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff fd9d 	bl	80083a0 <xTimerGenericCommand>
 8008866:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <prvSwitchTimerLists+0x94>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	603b      	str	r3, [r7, #0]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008884:	4b09      	ldr	r3, [pc, #36]	; (80088ac <prvSwitchTimerLists+0xbc>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b4      	bne.n	80087f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800888e:	4b07      	ldr	r3, [pc, #28]	; (80088ac <prvSwitchTimerLists+0xbc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008894:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <prvSwitchTimerLists+0xc0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a04      	ldr	r2, [pc, #16]	; (80088ac <prvSwitchTimerLists+0xbc>)
 800889a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800889c:	4a04      	ldr	r2, [pc, #16]	; (80088b0 <prvSwitchTimerLists+0xc0>)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	6013      	str	r3, [r2, #0]
}
 80088a2:	bf00      	nop
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000ef0 	.word	0x20000ef0
 80088b0:	20000ef4 	.word	0x20000ef4

080088b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ba:	f000 f92f 	bl	8008b1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d120      	bne.n	8008908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088c6:	4814      	ldr	r0, [pc, #80]	; (8008918 <prvCheckForValidListAndQueue+0x64>)
 80088c8:	f7fd fd66 	bl	8006398 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088cc:	4813      	ldr	r0, [pc, #76]	; (800891c <prvCheckForValidListAndQueue+0x68>)
 80088ce:	f7fd fd63 	bl	8006398 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088d2:	4b13      	ldr	r3, [pc, #76]	; (8008920 <prvCheckForValidListAndQueue+0x6c>)
 80088d4:	4a10      	ldr	r2, [pc, #64]	; (8008918 <prvCheckForValidListAndQueue+0x64>)
 80088d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <prvCheckForValidListAndQueue+0x70>)
 80088da:	4a10      	ldr	r2, [pc, #64]	; (800891c <prvCheckForValidListAndQueue+0x68>)
 80088dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088de:	2300      	movs	r3, #0
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4b11      	ldr	r3, [pc, #68]	; (8008928 <prvCheckForValidListAndQueue+0x74>)
 80088e4:	4a11      	ldr	r2, [pc, #68]	; (800892c <prvCheckForValidListAndQueue+0x78>)
 80088e6:	2110      	movs	r1, #16
 80088e8:	200a      	movs	r0, #10
 80088ea:	f7fd fe6d 	bl	80065c8 <xQueueGenericCreateStatic>
 80088ee:	4603      	mov	r3, r0
 80088f0:	4a08      	ldr	r2, [pc, #32]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	490b      	ldr	r1, [pc, #44]	; (8008930 <prvCheckForValidListAndQueue+0x7c>)
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fc9a 	bl	800723c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008908:	f000 f938 	bl	8008b7c <vPortExitCritical>
}
 800890c:	bf00      	nop
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000ef8 	.word	0x20000ef8
 8008918:	20000ec8 	.word	0x20000ec8
 800891c:	20000edc 	.word	0x20000edc
 8008920:	20000ef0 	.word	0x20000ef0
 8008924:	20000ef4 	.word	0x20000ef4
 8008928:	20000fa4 	.word	0x20000fa4
 800892c:	20000f04 	.word	0x20000f04
 8008930:	08009ad0 	.word	0x08009ad0

08008934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3b04      	subs	r3, #4
 8008944:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800894c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b04      	subs	r3, #4
 8008952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f023 0201 	bic.w	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008964:	4a08      	ldr	r2, [pc, #32]	; (8008988 <pxPortInitialiseStack+0x54>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b14      	subs	r3, #20
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b20      	subs	r3, #32
 800897a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800897c:	68fb      	ldr	r3, [r7, #12]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr
 8008988:	0800898d 	.word	0x0800898d

0800898c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008992:	2300      	movs	r3, #0
 8008994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <prvTaskExitError+0x54>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d00a      	beq.n	80089b6 <prvTaskExitError+0x2a>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <prvTaskExitError+0x28>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	60bb      	str	r3, [r7, #8]
}
 80089c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ca:	bf00      	nop
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0fc      	beq.n	80089cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	2000000c 	.word	0x2000000c
	...

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a0e:	4770      	bx	lr

08008a10 <pxCurrentTCBConst2>:
 8008a10:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a18:	4806      	ldr	r0, [pc, #24]	; (8008a34 <prvPortStartFirstTask+0x1c>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	b662      	cpsie	i
 8008a24:	b661      	cpsie	f
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	df00      	svc	0
 8008a30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a32:	bf00      	nop
 8008a34:	e000ed08 	.word	0xe000ed08

08008a38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a3e:	4b32      	ldr	r3, [pc, #200]	; (8008b08 <xPortStartScheduler+0xd0>)
 8008a40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	22ff      	movs	r2, #255	; 0xff
 8008a4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	4b2a      	ldr	r3, [pc, #168]	; (8008b0c <xPortStartScheduler+0xd4>)
 8008a64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a66:	4b2a      	ldr	r3, [pc, #168]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008a68:	2207      	movs	r2, #7
 8008a6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a6c:	e009      	b.n	8008a82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a6e:	4b28      	ldr	r3, [pc, #160]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	4a26      	ldr	r2, [pc, #152]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008a76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8a:	2b80      	cmp	r3, #128	; 0x80
 8008a8c:	d0ef      	beq.n	8008a6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f1c3 0307 	rsb	r3, r3, #7
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d00a      	beq.n	8008ab0 <xPortStartScheduler+0x78>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	60bb      	str	r3, [r7, #8]
}
 8008aac:	bf00      	nop
 8008aae:	e7fe      	b.n	8008aae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ab0:	4b17      	ldr	r3, [pc, #92]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008ab8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ac2:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <xPortStartScheduler+0xd8>)
 8008ac4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ace:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <xPortStartScheduler+0xdc>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a10      	ldr	r2, [pc, #64]	; (8008b14 <xPortStartScheduler+0xdc>)
 8008ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ada:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <xPortStartScheduler+0xdc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a0d      	ldr	r2, [pc, #52]	; (8008b14 <xPortStartScheduler+0xdc>)
 8008ae0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ae4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ae6:	f000 f8b9 	bl	8008c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008aea:	4b0b      	ldr	r3, [pc, #44]	; (8008b18 <xPortStartScheduler+0xe0>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008af0:	f7ff ff92 	bl	8008a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008af4:	f7fe ffa8 	bl	8007a48 <vTaskSwitchContext>
	prvTaskExitError();
 8008af8:	f7ff ff48 	bl	800898c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	e000e400 	.word	0xe000e400
 8008b0c:	20000ff4 	.word	0x20000ff4
 8008b10:	20000ff8 	.word	0x20000ff8
 8008b14:	e000ed20 	.word	0xe000ed20
 8008b18:	2000000c 	.word	0x2000000c

08008b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	607b      	str	r3, [r7, #4]
}
 8008b34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b36:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <vPortEnterCritical+0x58>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <vPortEnterCritical+0x58>)
 8008b3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b40:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <vPortEnterCritical+0x58>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d10f      	bne.n	8008b68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b48:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <vPortEnterCritical+0x5c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	603b      	str	r3, [r7, #0]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <vPortEnterCritical+0x4a>
	}
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2000000c 	.word	0x2000000c
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b82:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <vPortExitCritical+0x4c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <vPortExitCritical+0x24>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	607b      	str	r3, [r7, #4]
}
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ba0:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <vPortExitCritical+0x4c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	4a08      	ldr	r2, [pc, #32]	; (8008bc8 <vPortExitCritical+0x4c>)
 8008ba8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008baa:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <vPortExitCritical+0x4c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <vPortExitCritical+0x42>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	f383 8811 	msr	BASEPRI, r3
}
 8008bbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc80      	pop	{r7}
 8008bc6:	4770      	bx	lr
 8008bc8:	2000000c 	.word	0x2000000c
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bd0:	f3ef 8009 	mrs	r0, PSP
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <pxCurrentTCBConst>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008be0:	6010      	str	r0, [r2, #0]
 8008be2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008be6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bea:	f380 8811 	msr	BASEPRI, r0
 8008bee:	f7fe ff2b 	bl	8007a48 <vTaskSwitchContext>
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008bfe:	6819      	ldr	r1, [r3, #0]
 8008c00:	6808      	ldr	r0, [r1, #0]
 8008c02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c06:	f380 8809 	msr	PSP, r0
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	4770      	bx	lr

08008c10 <pxCurrentTCBConst>:
 8008c10:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c32:	f7fe fe4b 	bl	80078cc <xTaskIncrementTick>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <SysTick_Handler+0x40>)
 8008c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c60:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <vPortSetupTimerInterrupt+0x30>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c66:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <vPortSetupTimerInterrupt+0x38>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a09      	ldr	r2, [pc, #36]	; (8008c98 <vPortSetupTimerInterrupt+0x3c>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	4a08      	ldr	r2, [pc, #32]	; (8008c9c <vPortSetupTimerInterrupt+0x40>)
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <vPortSetupTimerInterrupt+0x30>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr
 8008c8c:	e000e010 	.word	0xe000e010
 8008c90:	e000e018 	.word	0xe000e018
 8008c94:	20000000 	.word	0x20000000
 8008c98:	10624dd3 	.word	0x10624dd3
 8008c9c:	e000e014 	.word	0xe000e014

08008ca0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ca6:	f3ef 8305 	mrs	r3, IPSR
 8008caa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b0f      	cmp	r3, #15
 8008cb0:	d914      	bls.n	8008cdc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cb2:	4a16      	ldr	r2, [pc, #88]	; (8008d0c <vPortValidateInterruptPriority+0x6c>)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cbc:	4b14      	ldr	r3, [pc, #80]	; (8008d10 <vPortValidateInterruptPriority+0x70>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	7afa      	ldrb	r2, [r7, #11]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d20a      	bcs.n	8008cdc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	607b      	str	r3, [r7, #4]
}
 8008cd8:	bf00      	nop
 8008cda:	e7fe      	b.n	8008cda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <vPortValidateInterruptPriority+0x74>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <vPortValidateInterruptPriority+0x78>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d90a      	bls.n	8008d02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	603b      	str	r3, [r7, #0]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <vPortValidateInterruptPriority+0x60>
	}
 8008d02:	bf00      	nop
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	e000e3f0 	.word	0xe000e3f0
 8008d10:	20000ff4 	.word	0x20000ff4
 8008d14:	e000ed0c 	.word	0xe000ed0c
 8008d18:	20000ff8 	.word	0x20000ff8

08008d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d28:	f7fe fd16 	bl	8007758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d2c:	4b58      	ldr	r3, [pc, #352]	; (8008e90 <pvPortMalloc+0x174>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d34:	f000 f910 	bl	8008f58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d38:	4b56      	ldr	r3, [pc, #344]	; (8008e94 <pvPortMalloc+0x178>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 808e 	bne.w	8008e62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01d      	beq.n	8008d88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d014      	beq.n	8008d88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f023 0307 	bic.w	r3, r3, #7
 8008d64:	3308      	adds	r3, #8
 8008d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <pvPortMalloc+0x6c>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	617b      	str	r3, [r7, #20]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d069      	beq.n	8008e62 <pvPortMalloc+0x146>
 8008d8e:	4b42      	ldr	r3, [pc, #264]	; (8008e98 <pvPortMalloc+0x17c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d864      	bhi.n	8008e62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d98:	4b40      	ldr	r3, [pc, #256]	; (8008e9c <pvPortMalloc+0x180>)
 8008d9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d9c:	4b3f      	ldr	r3, [pc, #252]	; (8008e9c <pvPortMalloc+0x180>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008da2:	e004      	b.n	8008dae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d903      	bls.n	8008dc0 <pvPortMalloc+0xa4>
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f1      	bne.n	8008da4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dc0:	4b33      	ldr	r3, [pc, #204]	; (8008e90 <pvPortMalloc+0x174>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d04b      	beq.n	8008e62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2208      	movs	r2, #8
 8008dd0:	4413      	add	r3, r2
 8008dd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	2308      	movs	r3, #8
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d91f      	bls.n	8008e2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4413      	add	r3, r2
 8008df2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <pvPortMalloc+0xf8>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	613b      	str	r3, [r7, #16]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e26:	69b8      	ldr	r0, [r7, #24]
 8008e28:	f000 f8f8 	bl	800901c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e2c:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <pvPortMalloc+0x17c>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <pvPortMalloc+0x17c>)
 8008e38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e3a:	4b17      	ldr	r3, [pc, #92]	; (8008e98 <pvPortMalloc+0x17c>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4b18      	ldr	r3, [pc, #96]	; (8008ea0 <pvPortMalloc+0x184>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d203      	bcs.n	8008e4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <pvPortMalloc+0x17c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <pvPortMalloc+0x184>)
 8008e4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <pvPortMalloc+0x178>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	431a      	orrs	r2, r3
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e62:	f7fe fc87 	bl	8007774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <pvPortMalloc+0x16a>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	60fb      	str	r3, [r7, #12]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <pvPortMalloc+0x168>
	return pvReturn;
 8008e86:	69fb      	ldr	r3, [r7, #28]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3728      	adds	r7, #40	; 0x28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20001c04 	.word	0x20001c04
 8008e94:	20001c10 	.word	0x20001c10
 8008e98:	20001c08 	.word	0x20001c08
 8008e9c:	20001bfc 	.word	0x20001bfc
 8008ea0:	20001c0c 	.word	0x20001c0c

08008ea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d048      	beq.n	8008f48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	425b      	negs	r3, r3
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4b21      	ldr	r3, [pc, #132]	; (8008f50 <vPortFree+0xac>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <vPortFree+0x44>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60fb      	str	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00a      	beq.n	8008f06 <vPortFree+0x62>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60bb      	str	r3, [r7, #8]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <vPortFree+0xac>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d019      	beq.n	8008f48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d115      	bne.n	8008f48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <vPortFree+0xac>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	43db      	mvns	r3, r3
 8008f26:	401a      	ands	r2, r3
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f2c:	f7fe fc14 	bl	8007758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <vPortFree+0xb0>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4413      	add	r3, r2
 8008f3a:	4a06      	ldr	r2, [pc, #24]	; (8008f54 <vPortFree+0xb0>)
 8008f3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f3e:	6938      	ldr	r0, [r7, #16]
 8008f40:	f000 f86c 	bl	800901c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f44:	f7fe fc16 	bl	8007774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f48:	bf00      	nop
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20001c10 	.word	0x20001c10
 8008f54:	20001c08 	.word	0x20001c08

08008f58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f64:	4b27      	ldr	r3, [pc, #156]	; (8009004 <prvHeapInit+0xac>)
 8008f66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f003 0307 	and.w	r3, r3, #7
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00c      	beq.n	8008f8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3307      	adds	r3, #7
 8008f76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0307 	bic.w	r3, r3, #7
 8008f7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	4a1f      	ldr	r2, [pc, #124]	; (8009004 <prvHeapInit+0xac>)
 8008f88:	4413      	add	r3, r2
 8008f8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f90:	4a1d      	ldr	r2, [pc, #116]	; (8009008 <prvHeapInit+0xb0>)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <prvHeapInit+0xb0>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fa4:	2208      	movs	r2, #8
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0307 	bic.w	r3, r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a15      	ldr	r2, [pc, #84]	; (800900c <prvHeapInit+0xb4>)
 8008fb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fba:	4b14      	ldr	r3, [pc, #80]	; (800900c <prvHeapInit+0xb4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <prvHeapInit+0xb4>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	; (800900c <prvHeapInit+0xb4>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	4a0a      	ldr	r2, [pc, #40]	; (8009010 <prvHeapInit+0xb8>)
 8008fe6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	4a09      	ldr	r2, [pc, #36]	; (8009014 <prvHeapInit+0xbc>)
 8008fee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ff0:	4b09      	ldr	r3, [pc, #36]	; (8009018 <prvHeapInit+0xc0>)
 8008ff2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ff6:	601a      	str	r2, [r3, #0]
}
 8008ff8:	bf00      	nop
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000ffc 	.word	0x20000ffc
 8009008:	20001bfc 	.word	0x20001bfc
 800900c:	20001c04 	.word	0x20001c04
 8009010:	20001c0c 	.word	0x20001c0c
 8009014:	20001c08 	.word	0x20001c08
 8009018:	20001c10 	.word	0x20001c10

0800901c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009024:	4b27      	ldr	r3, [pc, #156]	; (80090c4 <prvInsertBlockIntoFreeList+0xa8>)
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e002      	b.n	8009030 <prvInsertBlockIntoFreeList+0x14>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d8f7      	bhi.n	800902a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	4413      	add	r3, r2
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	429a      	cmp	r2, r3
 800904a:	d108      	bne.n	800905e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	441a      	add	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	441a      	add	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d118      	bne.n	80090a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <prvInsertBlockIntoFreeList+0xac>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d00d      	beq.n	800909a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	441a      	add	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e008      	b.n	80090ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800909a:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <prvInsertBlockIntoFreeList+0xac>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	e003      	b.n	80090ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d002      	beq.n	80090ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr
 80090c4:	20001bfc 	.word	0x20001bfc
 80090c8:	20001c04 	.word	0x20001c04

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000010 	.word	0x20000010

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	2600      	movs	r6, #0
 80090dc:	4d0c      	ldr	r5, [pc, #48]	; (8009110 <__libc_init_array+0x38>)
 80090de:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090e0:	1b64      	subs	r4, r4, r5
 80090e2:	10a4      	asrs	r4, r4, #2
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	f000 fc9c 	bl	8009a24 <_init>
 80090ec:	2600      	movs	r6, #0
 80090ee:	4d0a      	ldr	r5, [pc, #40]	; (8009118 <__libc_init_array+0x40>)
 80090f0:	4c0a      	ldr	r4, [pc, #40]	; (800911c <__libc_init_array+0x44>)
 80090f2:	1b64      	subs	r4, r4, r5
 80090f4:	10a4      	asrs	r4, r4, #2
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	08009dec 	.word	0x08009dec
 8009114:	08009dec 	.word	0x08009dec
 8009118:	08009dec 	.word	0x08009dec
 800911c:	08009df0 	.word	0x08009df0

08009120 <memcpy>:
 8009120:	440a      	add	r2, r1
 8009122:	4291      	cmp	r1, r2
 8009124:	f100 33ff 	add.w	r3, r0, #4294967295
 8009128:	d100      	bne.n	800912c <memcpy+0xc>
 800912a:	4770      	bx	lr
 800912c:	b510      	push	{r4, lr}
 800912e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009132:	4291      	cmp	r1, r2
 8009134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009138:	d1f9      	bne.n	800912e <memcpy+0xe>
 800913a:	bd10      	pop	{r4, pc}

0800913c <memset>:
 800913c:	4603      	mov	r3, r0
 800913e:	4402      	add	r2, r0
 8009140:	4293      	cmp	r3, r2
 8009142:	d100      	bne.n	8009146 <memset+0xa>
 8009144:	4770      	bx	lr
 8009146:	f803 1b01 	strb.w	r1, [r3], #1
 800914a:	e7f9      	b.n	8009140 <memset+0x4>

0800914c <siprintf>:
 800914c:	b40e      	push	{r1, r2, r3}
 800914e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009152:	b500      	push	{lr}
 8009154:	b09c      	sub	sp, #112	; 0x70
 8009156:	ab1d      	add	r3, sp, #116	; 0x74
 8009158:	9002      	str	r0, [sp, #8]
 800915a:	9006      	str	r0, [sp, #24]
 800915c:	9107      	str	r1, [sp, #28]
 800915e:	9104      	str	r1, [sp, #16]
 8009160:	4808      	ldr	r0, [pc, #32]	; (8009184 <siprintf+0x38>)
 8009162:	4909      	ldr	r1, [pc, #36]	; (8009188 <siprintf+0x3c>)
 8009164:	f853 2b04 	ldr.w	r2, [r3], #4
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	a902      	add	r1, sp, #8
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	f000 f868 	bl	8009244 <_svfiprintf_r>
 8009174:	2200      	movs	r2, #0
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	701a      	strb	r2, [r3, #0]
 800917a:	b01c      	add	sp, #112	; 0x70
 800917c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009180:	b003      	add	sp, #12
 8009182:	4770      	bx	lr
 8009184:	20000010 	.word	0x20000010
 8009188:	ffff0208 	.word	0xffff0208

0800918c <__ssputs_r>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	688e      	ldr	r6, [r1, #8]
 8009192:	4682      	mov	sl, r0
 8009194:	429e      	cmp	r6, r3
 8009196:	460c      	mov	r4, r1
 8009198:	4690      	mov	r8, r2
 800919a:	461f      	mov	r7, r3
 800919c:	d838      	bhi.n	8009210 <__ssputs_r+0x84>
 800919e:	898a      	ldrh	r2, [r1, #12]
 80091a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091a4:	d032      	beq.n	800920c <__ssputs_r+0x80>
 80091a6:	6825      	ldr	r5, [r4, #0]
 80091a8:	6909      	ldr	r1, [r1, #16]
 80091aa:	3301      	adds	r3, #1
 80091ac:	eba5 0901 	sub.w	r9, r5, r1
 80091b0:	6965      	ldr	r5, [r4, #20]
 80091b2:	444b      	add	r3, r9
 80091b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091bc:	106d      	asrs	r5, r5, #1
 80091be:	429d      	cmp	r5, r3
 80091c0:	bf38      	it	cc
 80091c2:	461d      	movcc	r5, r3
 80091c4:	0553      	lsls	r3, r2, #21
 80091c6:	d531      	bpl.n	800922c <__ssputs_r+0xa0>
 80091c8:	4629      	mov	r1, r5
 80091ca:	f000 fb61 	bl	8009890 <_malloc_r>
 80091ce:	4606      	mov	r6, r0
 80091d0:	b950      	cbnz	r0, 80091e8 <__ssputs_r+0x5c>
 80091d2:	230c      	movs	r3, #12
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	f8ca 3000 	str.w	r3, [sl]
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e8:	464a      	mov	r2, r9
 80091ea:	6921      	ldr	r1, [r4, #16]
 80091ec:	f7ff ff98 	bl	8009120 <memcpy>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	6126      	str	r6, [r4, #16]
 80091fe:	444e      	add	r6, r9
 8009200:	6026      	str	r6, [r4, #0]
 8009202:	463e      	mov	r6, r7
 8009204:	6165      	str	r5, [r4, #20]
 8009206:	eba5 0509 	sub.w	r5, r5, r9
 800920a:	60a5      	str	r5, [r4, #8]
 800920c:	42be      	cmp	r6, r7
 800920e:	d900      	bls.n	8009212 <__ssputs_r+0x86>
 8009210:	463e      	mov	r6, r7
 8009212:	4632      	mov	r2, r6
 8009214:	4641      	mov	r1, r8
 8009216:	6820      	ldr	r0, [r4, #0]
 8009218:	f000 fab8 	bl	800978c <memmove>
 800921c:	68a3      	ldr	r3, [r4, #8]
 800921e:	2000      	movs	r0, #0
 8009220:	1b9b      	subs	r3, r3, r6
 8009222:	60a3      	str	r3, [r4, #8]
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	4433      	add	r3, r6
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	e7db      	b.n	80091e4 <__ssputs_r+0x58>
 800922c:	462a      	mov	r2, r5
 800922e:	f000 fba3 	bl	8009978 <_realloc_r>
 8009232:	4606      	mov	r6, r0
 8009234:	2800      	cmp	r0, #0
 8009236:	d1e1      	bne.n	80091fc <__ssputs_r+0x70>
 8009238:	4650      	mov	r0, sl
 800923a:	6921      	ldr	r1, [r4, #16]
 800923c:	f000 fac0 	bl	80097c0 <_free_r>
 8009240:	e7c7      	b.n	80091d2 <__ssputs_r+0x46>
	...

08009244 <_svfiprintf_r>:
 8009244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	4698      	mov	r8, r3
 800924a:	898b      	ldrh	r3, [r1, #12]
 800924c:	4607      	mov	r7, r0
 800924e:	061b      	lsls	r3, r3, #24
 8009250:	460d      	mov	r5, r1
 8009252:	4614      	mov	r4, r2
 8009254:	b09d      	sub	sp, #116	; 0x74
 8009256:	d50e      	bpl.n	8009276 <_svfiprintf_r+0x32>
 8009258:	690b      	ldr	r3, [r1, #16]
 800925a:	b963      	cbnz	r3, 8009276 <_svfiprintf_r+0x32>
 800925c:	2140      	movs	r1, #64	; 0x40
 800925e:	f000 fb17 	bl	8009890 <_malloc_r>
 8009262:	6028      	str	r0, [r5, #0]
 8009264:	6128      	str	r0, [r5, #16]
 8009266:	b920      	cbnz	r0, 8009272 <_svfiprintf_r+0x2e>
 8009268:	230c      	movs	r3, #12
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e0d1      	b.n	8009416 <_svfiprintf_r+0x1d2>
 8009272:	2340      	movs	r3, #64	; 0x40
 8009274:	616b      	str	r3, [r5, #20]
 8009276:	2300      	movs	r3, #0
 8009278:	9309      	str	r3, [sp, #36]	; 0x24
 800927a:	2320      	movs	r3, #32
 800927c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009280:	2330      	movs	r3, #48	; 0x30
 8009282:	f04f 0901 	mov.w	r9, #1
 8009286:	f8cd 800c 	str.w	r8, [sp, #12]
 800928a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009430 <_svfiprintf_r+0x1ec>
 800928e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009292:	4623      	mov	r3, r4
 8009294:	469a      	mov	sl, r3
 8009296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800929a:	b10a      	cbz	r2, 80092a0 <_svfiprintf_r+0x5c>
 800929c:	2a25      	cmp	r2, #37	; 0x25
 800929e:	d1f9      	bne.n	8009294 <_svfiprintf_r+0x50>
 80092a0:	ebba 0b04 	subs.w	fp, sl, r4
 80092a4:	d00b      	beq.n	80092be <_svfiprintf_r+0x7a>
 80092a6:	465b      	mov	r3, fp
 80092a8:	4622      	mov	r2, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	4638      	mov	r0, r7
 80092ae:	f7ff ff6d 	bl	800918c <__ssputs_r>
 80092b2:	3001      	adds	r0, #1
 80092b4:	f000 80aa 	beq.w	800940c <_svfiprintf_r+0x1c8>
 80092b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ba:	445a      	add	r2, fp
 80092bc:	9209      	str	r2, [sp, #36]	; 0x24
 80092be:	f89a 3000 	ldrb.w	r3, [sl]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 80a2 	beq.w	800940c <_svfiprintf_r+0x1c8>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f04f 32ff 	mov.w	r2, #4294967295
 80092ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d2:	f10a 0a01 	add.w	sl, sl, #1
 80092d6:	9304      	str	r3, [sp, #16]
 80092d8:	9307      	str	r3, [sp, #28]
 80092da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092de:	931a      	str	r3, [sp, #104]	; 0x68
 80092e0:	4654      	mov	r4, sl
 80092e2:	2205      	movs	r2, #5
 80092e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e8:	4851      	ldr	r0, [pc, #324]	; (8009430 <_svfiprintf_r+0x1ec>)
 80092ea:	f000 fa41 	bl	8009770 <memchr>
 80092ee:	9a04      	ldr	r2, [sp, #16]
 80092f0:	b9d8      	cbnz	r0, 800932a <_svfiprintf_r+0xe6>
 80092f2:	06d0      	lsls	r0, r2, #27
 80092f4:	bf44      	itt	mi
 80092f6:	2320      	movmi	r3, #32
 80092f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fc:	0711      	lsls	r1, r2, #28
 80092fe:	bf44      	itt	mi
 8009300:	232b      	movmi	r3, #43	; 0x2b
 8009302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009306:	f89a 3000 	ldrb.w	r3, [sl]
 800930a:	2b2a      	cmp	r3, #42	; 0x2a
 800930c:	d015      	beq.n	800933a <_svfiprintf_r+0xf6>
 800930e:	4654      	mov	r4, sl
 8009310:	2000      	movs	r0, #0
 8009312:	f04f 0c0a 	mov.w	ip, #10
 8009316:	9a07      	ldr	r2, [sp, #28]
 8009318:	4621      	mov	r1, r4
 800931a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800931e:	3b30      	subs	r3, #48	; 0x30
 8009320:	2b09      	cmp	r3, #9
 8009322:	d94e      	bls.n	80093c2 <_svfiprintf_r+0x17e>
 8009324:	b1b0      	cbz	r0, 8009354 <_svfiprintf_r+0x110>
 8009326:	9207      	str	r2, [sp, #28]
 8009328:	e014      	b.n	8009354 <_svfiprintf_r+0x110>
 800932a:	eba0 0308 	sub.w	r3, r0, r8
 800932e:	fa09 f303 	lsl.w	r3, r9, r3
 8009332:	4313      	orrs	r3, r2
 8009334:	46a2      	mov	sl, r4
 8009336:	9304      	str	r3, [sp, #16]
 8009338:	e7d2      	b.n	80092e0 <_svfiprintf_r+0x9c>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	1d19      	adds	r1, r3, #4
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	9103      	str	r1, [sp, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfbb      	ittet	lt
 8009346:	425b      	neglt	r3, r3
 8009348:	f042 0202 	orrlt.w	r2, r2, #2
 800934c:	9307      	strge	r3, [sp, #28]
 800934e:	9307      	strlt	r3, [sp, #28]
 8009350:	bfb8      	it	lt
 8009352:	9204      	strlt	r2, [sp, #16]
 8009354:	7823      	ldrb	r3, [r4, #0]
 8009356:	2b2e      	cmp	r3, #46	; 0x2e
 8009358:	d10c      	bne.n	8009374 <_svfiprintf_r+0x130>
 800935a:	7863      	ldrb	r3, [r4, #1]
 800935c:	2b2a      	cmp	r3, #42	; 0x2a
 800935e:	d135      	bne.n	80093cc <_svfiprintf_r+0x188>
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	3402      	adds	r4, #2
 8009364:	1d1a      	adds	r2, r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	9203      	str	r2, [sp, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfb8      	it	lt
 800936e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009372:	9305      	str	r3, [sp, #20]
 8009374:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009434 <_svfiprintf_r+0x1f0>
 8009378:	2203      	movs	r2, #3
 800937a:	4650      	mov	r0, sl
 800937c:	7821      	ldrb	r1, [r4, #0]
 800937e:	f000 f9f7 	bl	8009770 <memchr>
 8009382:	b140      	cbz	r0, 8009396 <_svfiprintf_r+0x152>
 8009384:	2340      	movs	r3, #64	; 0x40
 8009386:	eba0 000a 	sub.w	r0, r0, sl
 800938a:	fa03 f000 	lsl.w	r0, r3, r0
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	3401      	adds	r4, #1
 8009392:	4303      	orrs	r3, r0
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939a:	2206      	movs	r2, #6
 800939c:	4826      	ldr	r0, [pc, #152]	; (8009438 <_svfiprintf_r+0x1f4>)
 800939e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093a2:	f000 f9e5 	bl	8009770 <memchr>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d038      	beq.n	800941c <_svfiprintf_r+0x1d8>
 80093aa:	4b24      	ldr	r3, [pc, #144]	; (800943c <_svfiprintf_r+0x1f8>)
 80093ac:	bb1b      	cbnz	r3, 80093f6 <_svfiprintf_r+0x1b2>
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	3307      	adds	r3, #7
 80093b2:	f023 0307 	bic.w	r3, r3, #7
 80093b6:	3308      	adds	r3, #8
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093bc:	4433      	add	r3, r6
 80093be:	9309      	str	r3, [sp, #36]	; 0x24
 80093c0:	e767      	b.n	8009292 <_svfiprintf_r+0x4e>
 80093c2:	460c      	mov	r4, r1
 80093c4:	2001      	movs	r0, #1
 80093c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ca:	e7a5      	b.n	8009318 <_svfiprintf_r+0xd4>
 80093cc:	2300      	movs	r3, #0
 80093ce:	f04f 0c0a 	mov.w	ip, #10
 80093d2:	4619      	mov	r1, r3
 80093d4:	3401      	adds	r4, #1
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	4620      	mov	r0, r4
 80093da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093de:	3a30      	subs	r2, #48	; 0x30
 80093e0:	2a09      	cmp	r2, #9
 80093e2:	d903      	bls.n	80093ec <_svfiprintf_r+0x1a8>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d0c5      	beq.n	8009374 <_svfiprintf_r+0x130>
 80093e8:	9105      	str	r1, [sp, #20]
 80093ea:	e7c3      	b.n	8009374 <_svfiprintf_r+0x130>
 80093ec:	4604      	mov	r4, r0
 80093ee:	2301      	movs	r3, #1
 80093f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f4:	e7f0      	b.n	80093d8 <_svfiprintf_r+0x194>
 80093f6:	ab03      	add	r3, sp, #12
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	462a      	mov	r2, r5
 80093fc:	4638      	mov	r0, r7
 80093fe:	4b10      	ldr	r3, [pc, #64]	; (8009440 <_svfiprintf_r+0x1fc>)
 8009400:	a904      	add	r1, sp, #16
 8009402:	f3af 8000 	nop.w
 8009406:	1c42      	adds	r2, r0, #1
 8009408:	4606      	mov	r6, r0
 800940a:	d1d6      	bne.n	80093ba <_svfiprintf_r+0x176>
 800940c:	89ab      	ldrh	r3, [r5, #12]
 800940e:	065b      	lsls	r3, r3, #25
 8009410:	f53f af2c 	bmi.w	800926c <_svfiprintf_r+0x28>
 8009414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009416:	b01d      	add	sp, #116	; 0x74
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	ab03      	add	r3, sp, #12
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	462a      	mov	r2, r5
 8009422:	4638      	mov	r0, r7
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <_svfiprintf_r+0x1fc>)
 8009426:	a904      	add	r1, sp, #16
 8009428:	f000 f87c 	bl	8009524 <_printf_i>
 800942c:	e7eb      	b.n	8009406 <_svfiprintf_r+0x1c2>
 800942e:	bf00      	nop
 8009430:	08009db8 	.word	0x08009db8
 8009434:	08009dbe 	.word	0x08009dbe
 8009438:	08009dc2 	.word	0x08009dc2
 800943c:	00000000 	.word	0x00000000
 8009440:	0800918d 	.word	0x0800918d

08009444 <_printf_common>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	4616      	mov	r6, r2
 800944a:	4699      	mov	r9, r3
 800944c:	688a      	ldr	r2, [r1, #8]
 800944e:	690b      	ldr	r3, [r1, #16]
 8009450:	4607      	mov	r7, r0
 8009452:	4293      	cmp	r3, r2
 8009454:	bfb8      	it	lt
 8009456:	4613      	movlt	r3, r2
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800945e:	460c      	mov	r4, r1
 8009460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009464:	b10a      	cbz	r2, 800946a <_printf_common+0x26>
 8009466:	3301      	adds	r3, #1
 8009468:	6033      	str	r3, [r6, #0]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	0699      	lsls	r1, r3, #26
 800946e:	bf42      	ittt	mi
 8009470:	6833      	ldrmi	r3, [r6, #0]
 8009472:	3302      	addmi	r3, #2
 8009474:	6033      	strmi	r3, [r6, #0]
 8009476:	6825      	ldr	r5, [r4, #0]
 8009478:	f015 0506 	ands.w	r5, r5, #6
 800947c:	d106      	bne.n	800948c <_printf_common+0x48>
 800947e:	f104 0a19 	add.w	sl, r4, #25
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	6832      	ldr	r2, [r6, #0]
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	42ab      	cmp	r3, r5
 800948a:	dc28      	bgt.n	80094de <_printf_common+0x9a>
 800948c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009490:	1e13      	subs	r3, r2, #0
 8009492:	6822      	ldr	r2, [r4, #0]
 8009494:	bf18      	it	ne
 8009496:	2301      	movne	r3, #1
 8009498:	0692      	lsls	r2, r2, #26
 800949a:	d42d      	bmi.n	80094f8 <_printf_common+0xb4>
 800949c:	4649      	mov	r1, r9
 800949e:	4638      	mov	r0, r7
 80094a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094a4:	47c0      	blx	r8
 80094a6:	3001      	adds	r0, #1
 80094a8:	d020      	beq.n	80094ec <_printf_common+0xa8>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	68e5      	ldr	r5, [r4, #12]
 80094ae:	f003 0306 	and.w	r3, r3, #6
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	bf18      	it	ne
 80094b6:	2500      	movne	r5, #0
 80094b8:	6832      	ldr	r2, [r6, #0]
 80094ba:	f04f 0600 	mov.w	r6, #0
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	bf08      	it	eq
 80094c2:	1aad      	subeq	r5, r5, r2
 80094c4:	6922      	ldr	r2, [r4, #16]
 80094c6:	bf08      	it	eq
 80094c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094cc:	4293      	cmp	r3, r2
 80094ce:	bfc4      	itt	gt
 80094d0:	1a9b      	subgt	r3, r3, r2
 80094d2:	18ed      	addgt	r5, r5, r3
 80094d4:	341a      	adds	r4, #26
 80094d6:	42b5      	cmp	r5, r6
 80094d8:	d11a      	bne.n	8009510 <_printf_common+0xcc>
 80094da:	2000      	movs	r0, #0
 80094dc:	e008      	b.n	80094f0 <_printf_common+0xac>
 80094de:	2301      	movs	r3, #1
 80094e0:	4652      	mov	r2, sl
 80094e2:	4649      	mov	r1, r9
 80094e4:	4638      	mov	r0, r7
 80094e6:	47c0      	blx	r8
 80094e8:	3001      	adds	r0, #1
 80094ea:	d103      	bne.n	80094f4 <_printf_common+0xb0>
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f4:	3501      	adds	r5, #1
 80094f6:	e7c4      	b.n	8009482 <_printf_common+0x3e>
 80094f8:	2030      	movs	r0, #48	; 0x30
 80094fa:	18e1      	adds	r1, r4, r3
 80094fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009506:	4422      	add	r2, r4
 8009508:	3302      	adds	r3, #2
 800950a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800950e:	e7c5      	b.n	800949c <_printf_common+0x58>
 8009510:	2301      	movs	r3, #1
 8009512:	4622      	mov	r2, r4
 8009514:	4649      	mov	r1, r9
 8009516:	4638      	mov	r0, r7
 8009518:	47c0      	blx	r8
 800951a:	3001      	adds	r0, #1
 800951c:	d0e6      	beq.n	80094ec <_printf_common+0xa8>
 800951e:	3601      	adds	r6, #1
 8009520:	e7d9      	b.n	80094d6 <_printf_common+0x92>
	...

08009524 <_printf_i>:
 8009524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009528:	7e0f      	ldrb	r7, [r1, #24]
 800952a:	4691      	mov	r9, r2
 800952c:	2f78      	cmp	r7, #120	; 0x78
 800952e:	4680      	mov	r8, r0
 8009530:	460c      	mov	r4, r1
 8009532:	469a      	mov	sl, r3
 8009534:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800953a:	d807      	bhi.n	800954c <_printf_i+0x28>
 800953c:	2f62      	cmp	r7, #98	; 0x62
 800953e:	d80a      	bhi.n	8009556 <_printf_i+0x32>
 8009540:	2f00      	cmp	r7, #0
 8009542:	f000 80d9 	beq.w	80096f8 <_printf_i+0x1d4>
 8009546:	2f58      	cmp	r7, #88	; 0x58
 8009548:	f000 80a4 	beq.w	8009694 <_printf_i+0x170>
 800954c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009554:	e03a      	b.n	80095cc <_printf_i+0xa8>
 8009556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800955a:	2b15      	cmp	r3, #21
 800955c:	d8f6      	bhi.n	800954c <_printf_i+0x28>
 800955e:	a101      	add	r1, pc, #4	; (adr r1, 8009564 <_printf_i+0x40>)
 8009560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009564:	080095bd 	.word	0x080095bd
 8009568:	080095d1 	.word	0x080095d1
 800956c:	0800954d 	.word	0x0800954d
 8009570:	0800954d 	.word	0x0800954d
 8009574:	0800954d 	.word	0x0800954d
 8009578:	0800954d 	.word	0x0800954d
 800957c:	080095d1 	.word	0x080095d1
 8009580:	0800954d 	.word	0x0800954d
 8009584:	0800954d 	.word	0x0800954d
 8009588:	0800954d 	.word	0x0800954d
 800958c:	0800954d 	.word	0x0800954d
 8009590:	080096df 	.word	0x080096df
 8009594:	08009601 	.word	0x08009601
 8009598:	080096c1 	.word	0x080096c1
 800959c:	0800954d 	.word	0x0800954d
 80095a0:	0800954d 	.word	0x0800954d
 80095a4:	08009701 	.word	0x08009701
 80095a8:	0800954d 	.word	0x0800954d
 80095ac:	08009601 	.word	0x08009601
 80095b0:	0800954d 	.word	0x0800954d
 80095b4:	0800954d 	.word	0x0800954d
 80095b8:	080096c9 	.word	0x080096c9
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	1d1a      	adds	r2, r3, #4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	602a      	str	r2, [r5, #0]
 80095c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095cc:	2301      	movs	r3, #1
 80095ce:	e0a4      	b.n	800971a <_printf_i+0x1f6>
 80095d0:	6820      	ldr	r0, [r4, #0]
 80095d2:	6829      	ldr	r1, [r5, #0]
 80095d4:	0606      	lsls	r6, r0, #24
 80095d6:	f101 0304 	add.w	r3, r1, #4
 80095da:	d50a      	bpl.n	80095f2 <_printf_i+0xce>
 80095dc:	680e      	ldr	r6, [r1, #0]
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	da03      	bge.n	80095ec <_printf_i+0xc8>
 80095e4:	232d      	movs	r3, #45	; 0x2d
 80095e6:	4276      	negs	r6, r6
 80095e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ec:	230a      	movs	r3, #10
 80095ee:	485e      	ldr	r0, [pc, #376]	; (8009768 <_printf_i+0x244>)
 80095f0:	e019      	b.n	8009626 <_printf_i+0x102>
 80095f2:	680e      	ldr	r6, [r1, #0]
 80095f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	bf18      	it	ne
 80095fc:	b236      	sxthne	r6, r6
 80095fe:	e7ef      	b.n	80095e0 <_printf_i+0xbc>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	6820      	ldr	r0, [r4, #0]
 8009604:	1d19      	adds	r1, r3, #4
 8009606:	6029      	str	r1, [r5, #0]
 8009608:	0601      	lsls	r1, r0, #24
 800960a:	d501      	bpl.n	8009610 <_printf_i+0xec>
 800960c:	681e      	ldr	r6, [r3, #0]
 800960e:	e002      	b.n	8009616 <_printf_i+0xf2>
 8009610:	0646      	lsls	r6, r0, #25
 8009612:	d5fb      	bpl.n	800960c <_printf_i+0xe8>
 8009614:	881e      	ldrh	r6, [r3, #0]
 8009616:	2f6f      	cmp	r7, #111	; 0x6f
 8009618:	bf0c      	ite	eq
 800961a:	2308      	moveq	r3, #8
 800961c:	230a      	movne	r3, #10
 800961e:	4852      	ldr	r0, [pc, #328]	; (8009768 <_printf_i+0x244>)
 8009620:	2100      	movs	r1, #0
 8009622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009626:	6865      	ldr	r5, [r4, #4]
 8009628:	2d00      	cmp	r5, #0
 800962a:	bfa8      	it	ge
 800962c:	6821      	ldrge	r1, [r4, #0]
 800962e:	60a5      	str	r5, [r4, #8]
 8009630:	bfa4      	itt	ge
 8009632:	f021 0104 	bicge.w	r1, r1, #4
 8009636:	6021      	strge	r1, [r4, #0]
 8009638:	b90e      	cbnz	r6, 800963e <_printf_i+0x11a>
 800963a:	2d00      	cmp	r5, #0
 800963c:	d04d      	beq.n	80096da <_printf_i+0x1b6>
 800963e:	4615      	mov	r5, r2
 8009640:	fbb6 f1f3 	udiv	r1, r6, r3
 8009644:	fb03 6711 	mls	r7, r3, r1, r6
 8009648:	5dc7      	ldrb	r7, [r0, r7]
 800964a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800964e:	4637      	mov	r7, r6
 8009650:	42bb      	cmp	r3, r7
 8009652:	460e      	mov	r6, r1
 8009654:	d9f4      	bls.n	8009640 <_printf_i+0x11c>
 8009656:	2b08      	cmp	r3, #8
 8009658:	d10b      	bne.n	8009672 <_printf_i+0x14e>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	07de      	lsls	r6, r3, #31
 800965e:	d508      	bpl.n	8009672 <_printf_i+0x14e>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	6861      	ldr	r1, [r4, #4]
 8009664:	4299      	cmp	r1, r3
 8009666:	bfde      	ittt	le
 8009668:	2330      	movle	r3, #48	; 0x30
 800966a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800966e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009672:	1b52      	subs	r2, r2, r5
 8009674:	6122      	str	r2, [r4, #16]
 8009676:	464b      	mov	r3, r9
 8009678:	4621      	mov	r1, r4
 800967a:	4640      	mov	r0, r8
 800967c:	f8cd a000 	str.w	sl, [sp]
 8009680:	aa03      	add	r2, sp, #12
 8009682:	f7ff fedf 	bl	8009444 <_printf_common>
 8009686:	3001      	adds	r0, #1
 8009688:	d14c      	bne.n	8009724 <_printf_i+0x200>
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	b004      	add	sp, #16
 8009690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009694:	4834      	ldr	r0, [pc, #208]	; (8009768 <_printf_i+0x244>)
 8009696:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800969a:	6829      	ldr	r1, [r5, #0]
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	f851 6b04 	ldr.w	r6, [r1], #4
 80096a2:	6029      	str	r1, [r5, #0]
 80096a4:	061d      	lsls	r5, r3, #24
 80096a6:	d514      	bpl.n	80096d2 <_printf_i+0x1ae>
 80096a8:	07df      	lsls	r7, r3, #31
 80096aa:	bf44      	itt	mi
 80096ac:	f043 0320 	orrmi.w	r3, r3, #32
 80096b0:	6023      	strmi	r3, [r4, #0]
 80096b2:	b91e      	cbnz	r6, 80096bc <_printf_i+0x198>
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	f023 0320 	bic.w	r3, r3, #32
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2310      	movs	r3, #16
 80096be:	e7af      	b.n	8009620 <_printf_i+0xfc>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	f043 0320 	orr.w	r3, r3, #32
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	2378      	movs	r3, #120	; 0x78
 80096ca:	4828      	ldr	r0, [pc, #160]	; (800976c <_printf_i+0x248>)
 80096cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096d0:	e7e3      	b.n	800969a <_printf_i+0x176>
 80096d2:	0659      	lsls	r1, r3, #25
 80096d4:	bf48      	it	mi
 80096d6:	b2b6      	uxthmi	r6, r6
 80096d8:	e7e6      	b.n	80096a8 <_printf_i+0x184>
 80096da:	4615      	mov	r5, r2
 80096dc:	e7bb      	b.n	8009656 <_printf_i+0x132>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	6826      	ldr	r6, [r4, #0]
 80096e2:	1d18      	adds	r0, r3, #4
 80096e4:	6961      	ldr	r1, [r4, #20]
 80096e6:	6028      	str	r0, [r5, #0]
 80096e8:	0635      	lsls	r5, r6, #24
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	d501      	bpl.n	80096f2 <_printf_i+0x1ce>
 80096ee:	6019      	str	r1, [r3, #0]
 80096f0:	e002      	b.n	80096f8 <_printf_i+0x1d4>
 80096f2:	0670      	lsls	r0, r6, #25
 80096f4:	d5fb      	bpl.n	80096ee <_printf_i+0x1ca>
 80096f6:	8019      	strh	r1, [r3, #0]
 80096f8:	2300      	movs	r3, #0
 80096fa:	4615      	mov	r5, r2
 80096fc:	6123      	str	r3, [r4, #16]
 80096fe:	e7ba      	b.n	8009676 <_printf_i+0x152>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	2100      	movs	r1, #0
 8009704:	1d1a      	adds	r2, r3, #4
 8009706:	602a      	str	r2, [r5, #0]
 8009708:	681d      	ldr	r5, [r3, #0]
 800970a:	6862      	ldr	r2, [r4, #4]
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f82f 	bl	8009770 <memchr>
 8009712:	b108      	cbz	r0, 8009718 <_printf_i+0x1f4>
 8009714:	1b40      	subs	r0, r0, r5
 8009716:	6060      	str	r0, [r4, #4]
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	2300      	movs	r3, #0
 800971e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009722:	e7a8      	b.n	8009676 <_printf_i+0x152>
 8009724:	462a      	mov	r2, r5
 8009726:	4649      	mov	r1, r9
 8009728:	4640      	mov	r0, r8
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	47d0      	blx	sl
 800972e:	3001      	adds	r0, #1
 8009730:	d0ab      	beq.n	800968a <_printf_i+0x166>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	079b      	lsls	r3, r3, #30
 8009736:	d413      	bmi.n	8009760 <_printf_i+0x23c>
 8009738:	68e0      	ldr	r0, [r4, #12]
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	4298      	cmp	r0, r3
 800973e:	bfb8      	it	lt
 8009740:	4618      	movlt	r0, r3
 8009742:	e7a4      	b.n	800968e <_printf_i+0x16a>
 8009744:	2301      	movs	r3, #1
 8009746:	4632      	mov	r2, r6
 8009748:	4649      	mov	r1, r9
 800974a:	4640      	mov	r0, r8
 800974c:	47d0      	blx	sl
 800974e:	3001      	adds	r0, #1
 8009750:	d09b      	beq.n	800968a <_printf_i+0x166>
 8009752:	3501      	adds	r5, #1
 8009754:	68e3      	ldr	r3, [r4, #12]
 8009756:	9903      	ldr	r1, [sp, #12]
 8009758:	1a5b      	subs	r3, r3, r1
 800975a:	42ab      	cmp	r3, r5
 800975c:	dcf2      	bgt.n	8009744 <_printf_i+0x220>
 800975e:	e7eb      	b.n	8009738 <_printf_i+0x214>
 8009760:	2500      	movs	r5, #0
 8009762:	f104 0619 	add.w	r6, r4, #25
 8009766:	e7f5      	b.n	8009754 <_printf_i+0x230>
 8009768:	08009dc9 	.word	0x08009dc9
 800976c:	08009dda 	.word	0x08009dda

08009770 <memchr>:
 8009770:	4603      	mov	r3, r0
 8009772:	b510      	push	{r4, lr}
 8009774:	b2c9      	uxtb	r1, r1
 8009776:	4402      	add	r2, r0
 8009778:	4293      	cmp	r3, r2
 800977a:	4618      	mov	r0, r3
 800977c:	d101      	bne.n	8009782 <memchr+0x12>
 800977e:	2000      	movs	r0, #0
 8009780:	e003      	b.n	800978a <memchr+0x1a>
 8009782:	7804      	ldrb	r4, [r0, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	428c      	cmp	r4, r1
 8009788:	d1f6      	bne.n	8009778 <memchr+0x8>
 800978a:	bd10      	pop	{r4, pc}

0800978c <memmove>:
 800978c:	4288      	cmp	r0, r1
 800978e:	b510      	push	{r4, lr}
 8009790:	eb01 0402 	add.w	r4, r1, r2
 8009794:	d902      	bls.n	800979c <memmove+0x10>
 8009796:	4284      	cmp	r4, r0
 8009798:	4623      	mov	r3, r4
 800979a:	d807      	bhi.n	80097ac <memmove+0x20>
 800979c:	1e43      	subs	r3, r0, #1
 800979e:	42a1      	cmp	r1, r4
 80097a0:	d008      	beq.n	80097b4 <memmove+0x28>
 80097a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097aa:	e7f8      	b.n	800979e <memmove+0x12>
 80097ac:	4601      	mov	r1, r0
 80097ae:	4402      	add	r2, r0
 80097b0:	428a      	cmp	r2, r1
 80097b2:	d100      	bne.n	80097b6 <memmove+0x2a>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097be:	e7f7      	b.n	80097b0 <memmove+0x24>

080097c0 <_free_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4605      	mov	r5, r0
 80097c4:	2900      	cmp	r1, #0
 80097c6:	d040      	beq.n	800984a <_free_r+0x8a>
 80097c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097cc:	1f0c      	subs	r4, r1, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	bfb8      	it	lt
 80097d2:	18e4      	addlt	r4, r4, r3
 80097d4:	f000 f910 	bl	80099f8 <__malloc_lock>
 80097d8:	4a1c      	ldr	r2, [pc, #112]	; (800984c <_free_r+0x8c>)
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	b933      	cbnz	r3, 80097ec <_free_r+0x2c>
 80097de:	6063      	str	r3, [r4, #4]
 80097e0:	6014      	str	r4, [r2, #0]
 80097e2:	4628      	mov	r0, r5
 80097e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097e8:	f000 b90c 	b.w	8009a04 <__malloc_unlock>
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	d908      	bls.n	8009802 <_free_r+0x42>
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	1821      	adds	r1, r4, r0
 80097f4:	428b      	cmp	r3, r1
 80097f6:	bf01      	itttt	eq
 80097f8:	6819      	ldreq	r1, [r3, #0]
 80097fa:	685b      	ldreq	r3, [r3, #4]
 80097fc:	1809      	addeq	r1, r1, r0
 80097fe:	6021      	streq	r1, [r4, #0]
 8009800:	e7ed      	b.n	80097de <_free_r+0x1e>
 8009802:	461a      	mov	r2, r3
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	b10b      	cbz	r3, 800980c <_free_r+0x4c>
 8009808:	42a3      	cmp	r3, r4
 800980a:	d9fa      	bls.n	8009802 <_free_r+0x42>
 800980c:	6811      	ldr	r1, [r2, #0]
 800980e:	1850      	adds	r0, r2, r1
 8009810:	42a0      	cmp	r0, r4
 8009812:	d10b      	bne.n	800982c <_free_r+0x6c>
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	4401      	add	r1, r0
 8009818:	1850      	adds	r0, r2, r1
 800981a:	4283      	cmp	r3, r0
 800981c:	6011      	str	r1, [r2, #0]
 800981e:	d1e0      	bne.n	80097e2 <_free_r+0x22>
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4401      	add	r1, r0
 8009826:	6011      	str	r1, [r2, #0]
 8009828:	6053      	str	r3, [r2, #4]
 800982a:	e7da      	b.n	80097e2 <_free_r+0x22>
 800982c:	d902      	bls.n	8009834 <_free_r+0x74>
 800982e:	230c      	movs	r3, #12
 8009830:	602b      	str	r3, [r5, #0]
 8009832:	e7d6      	b.n	80097e2 <_free_r+0x22>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	1821      	adds	r1, r4, r0
 8009838:	428b      	cmp	r3, r1
 800983a:	bf01      	itttt	eq
 800983c:	6819      	ldreq	r1, [r3, #0]
 800983e:	685b      	ldreq	r3, [r3, #4]
 8009840:	1809      	addeq	r1, r1, r0
 8009842:	6021      	streq	r1, [r4, #0]
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	6054      	str	r4, [r2, #4]
 8009848:	e7cb      	b.n	80097e2 <_free_r+0x22>
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20001c14 	.word	0x20001c14

08009850 <sbrk_aligned>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	4e0e      	ldr	r6, [pc, #56]	; (800988c <sbrk_aligned+0x3c>)
 8009854:	460c      	mov	r4, r1
 8009856:	6831      	ldr	r1, [r6, #0]
 8009858:	4605      	mov	r5, r0
 800985a:	b911      	cbnz	r1, 8009862 <sbrk_aligned+0x12>
 800985c:	f000 f8bc 	bl	80099d8 <_sbrk_r>
 8009860:	6030      	str	r0, [r6, #0]
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f000 f8b7 	bl	80099d8 <_sbrk_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d00a      	beq.n	8009884 <sbrk_aligned+0x34>
 800986e:	1cc4      	adds	r4, r0, #3
 8009870:	f024 0403 	bic.w	r4, r4, #3
 8009874:	42a0      	cmp	r0, r4
 8009876:	d007      	beq.n	8009888 <sbrk_aligned+0x38>
 8009878:	1a21      	subs	r1, r4, r0
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f8ac 	bl	80099d8 <_sbrk_r>
 8009880:	3001      	adds	r0, #1
 8009882:	d101      	bne.n	8009888 <sbrk_aligned+0x38>
 8009884:	f04f 34ff 	mov.w	r4, #4294967295
 8009888:	4620      	mov	r0, r4
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	20001c18 	.word	0x20001c18

08009890 <_malloc_r>:
 8009890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009894:	1ccd      	adds	r5, r1, #3
 8009896:	f025 0503 	bic.w	r5, r5, #3
 800989a:	3508      	adds	r5, #8
 800989c:	2d0c      	cmp	r5, #12
 800989e:	bf38      	it	cc
 80098a0:	250c      	movcc	r5, #12
 80098a2:	2d00      	cmp	r5, #0
 80098a4:	4607      	mov	r7, r0
 80098a6:	db01      	blt.n	80098ac <_malloc_r+0x1c>
 80098a8:	42a9      	cmp	r1, r5
 80098aa:	d905      	bls.n	80098b8 <_malloc_r+0x28>
 80098ac:	230c      	movs	r3, #12
 80098ae:	2600      	movs	r6, #0
 80098b0:	603b      	str	r3, [r7, #0]
 80098b2:	4630      	mov	r0, r6
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	4e2e      	ldr	r6, [pc, #184]	; (8009974 <_malloc_r+0xe4>)
 80098ba:	f000 f89d 	bl	80099f8 <__malloc_lock>
 80098be:	6833      	ldr	r3, [r6, #0]
 80098c0:	461c      	mov	r4, r3
 80098c2:	bb34      	cbnz	r4, 8009912 <_malloc_r+0x82>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4638      	mov	r0, r7
 80098c8:	f7ff ffc2 	bl	8009850 <sbrk_aligned>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	4604      	mov	r4, r0
 80098d0:	d14d      	bne.n	800996e <_malloc_r+0xde>
 80098d2:	6834      	ldr	r4, [r6, #0]
 80098d4:	4626      	mov	r6, r4
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d140      	bne.n	800995c <_malloc_r+0xcc>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	4631      	mov	r1, r6
 80098de:	4638      	mov	r0, r7
 80098e0:	eb04 0803 	add.w	r8, r4, r3
 80098e4:	f000 f878 	bl	80099d8 <_sbrk_r>
 80098e8:	4580      	cmp	r8, r0
 80098ea:	d13a      	bne.n	8009962 <_malloc_r+0xd2>
 80098ec:	6821      	ldr	r1, [r4, #0]
 80098ee:	3503      	adds	r5, #3
 80098f0:	1a6d      	subs	r5, r5, r1
 80098f2:	f025 0503 	bic.w	r5, r5, #3
 80098f6:	3508      	adds	r5, #8
 80098f8:	2d0c      	cmp	r5, #12
 80098fa:	bf38      	it	cc
 80098fc:	250c      	movcc	r5, #12
 80098fe:	4638      	mov	r0, r7
 8009900:	4629      	mov	r1, r5
 8009902:	f7ff ffa5 	bl	8009850 <sbrk_aligned>
 8009906:	3001      	adds	r0, #1
 8009908:	d02b      	beq.n	8009962 <_malloc_r+0xd2>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	442b      	add	r3, r5
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	e00e      	b.n	8009930 <_malloc_r+0xa0>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	1b52      	subs	r2, r2, r5
 8009916:	d41e      	bmi.n	8009956 <_malloc_r+0xc6>
 8009918:	2a0b      	cmp	r2, #11
 800991a:	d916      	bls.n	800994a <_malloc_r+0xba>
 800991c:	1961      	adds	r1, r4, r5
 800991e:	42a3      	cmp	r3, r4
 8009920:	6025      	str	r5, [r4, #0]
 8009922:	bf18      	it	ne
 8009924:	6059      	strne	r1, [r3, #4]
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	bf08      	it	eq
 800992a:	6031      	streq	r1, [r6, #0]
 800992c:	5162      	str	r2, [r4, r5]
 800992e:	604b      	str	r3, [r1, #4]
 8009930:	4638      	mov	r0, r7
 8009932:	f104 060b 	add.w	r6, r4, #11
 8009936:	f000 f865 	bl	8009a04 <__malloc_unlock>
 800993a:	f026 0607 	bic.w	r6, r6, #7
 800993e:	1d23      	adds	r3, r4, #4
 8009940:	1af2      	subs	r2, r6, r3
 8009942:	d0b6      	beq.n	80098b2 <_malloc_r+0x22>
 8009944:	1b9b      	subs	r3, r3, r6
 8009946:	50a3      	str	r3, [r4, r2]
 8009948:	e7b3      	b.n	80098b2 <_malloc_r+0x22>
 800994a:	6862      	ldr	r2, [r4, #4]
 800994c:	42a3      	cmp	r3, r4
 800994e:	bf0c      	ite	eq
 8009950:	6032      	streq	r2, [r6, #0]
 8009952:	605a      	strne	r2, [r3, #4]
 8009954:	e7ec      	b.n	8009930 <_malloc_r+0xa0>
 8009956:	4623      	mov	r3, r4
 8009958:	6864      	ldr	r4, [r4, #4]
 800995a:	e7b2      	b.n	80098c2 <_malloc_r+0x32>
 800995c:	4634      	mov	r4, r6
 800995e:	6876      	ldr	r6, [r6, #4]
 8009960:	e7b9      	b.n	80098d6 <_malloc_r+0x46>
 8009962:	230c      	movs	r3, #12
 8009964:	4638      	mov	r0, r7
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	f000 f84c 	bl	8009a04 <__malloc_unlock>
 800996c:	e7a1      	b.n	80098b2 <_malloc_r+0x22>
 800996e:	6025      	str	r5, [r4, #0]
 8009970:	e7de      	b.n	8009930 <_malloc_r+0xa0>
 8009972:	bf00      	nop
 8009974:	20001c14 	.word	0x20001c14

08009978 <_realloc_r>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	4680      	mov	r8, r0
 800997e:	4614      	mov	r4, r2
 8009980:	460e      	mov	r6, r1
 8009982:	b921      	cbnz	r1, 800998e <_realloc_r+0x16>
 8009984:	4611      	mov	r1, r2
 8009986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800998a:	f7ff bf81 	b.w	8009890 <_malloc_r>
 800998e:	b92a      	cbnz	r2, 800999c <_realloc_r+0x24>
 8009990:	f7ff ff16 	bl	80097c0 <_free_r>
 8009994:	4625      	mov	r5, r4
 8009996:	4628      	mov	r0, r5
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	f000 f838 	bl	8009a10 <_malloc_usable_size_r>
 80099a0:	4284      	cmp	r4, r0
 80099a2:	4607      	mov	r7, r0
 80099a4:	d802      	bhi.n	80099ac <_realloc_r+0x34>
 80099a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099aa:	d812      	bhi.n	80099d2 <_realloc_r+0x5a>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4640      	mov	r0, r8
 80099b0:	f7ff ff6e 	bl	8009890 <_malloc_r>
 80099b4:	4605      	mov	r5, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0ed      	beq.n	8009996 <_realloc_r+0x1e>
 80099ba:	42bc      	cmp	r4, r7
 80099bc:	4622      	mov	r2, r4
 80099be:	4631      	mov	r1, r6
 80099c0:	bf28      	it	cs
 80099c2:	463a      	movcs	r2, r7
 80099c4:	f7ff fbac 	bl	8009120 <memcpy>
 80099c8:	4631      	mov	r1, r6
 80099ca:	4640      	mov	r0, r8
 80099cc:	f7ff fef8 	bl	80097c0 <_free_r>
 80099d0:	e7e1      	b.n	8009996 <_realloc_r+0x1e>
 80099d2:	4635      	mov	r5, r6
 80099d4:	e7df      	b.n	8009996 <_realloc_r+0x1e>
	...

080099d8 <_sbrk_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	2300      	movs	r3, #0
 80099dc:	4d05      	ldr	r5, [pc, #20]	; (80099f4 <_sbrk_r+0x1c>)
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f8 f81e 	bl	8001a24 <_sbrk>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_sbrk_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_sbrk_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20001c1c 	.word	0x20001c1c

080099f8 <__malloc_lock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_lock+0x8>)
 80099fa:	f000 b811 	b.w	8009a20 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	20001c20 	.word	0x20001c20

08009a04 <__malloc_unlock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__malloc_unlock+0x8>)
 8009a06:	f000 b80c 	b.w	8009a22 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	20001c20 	.word	0x20001c20

08009a10 <_malloc_usable_size_r>:
 8009a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a14:	1f18      	subs	r0, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbc      	itt	lt
 8009a1a:	580b      	ldrlt	r3, [r1, r0]
 8009a1c:	18c0      	addlt	r0, r0, r3
 8009a1e:	4770      	bx	lr

08009a20 <__retarget_lock_acquire_recursive>:
 8009a20:	4770      	bx	lr

08009a22 <__retarget_lock_release_recursive>:
 8009a22:	4770      	bx	lr

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr
